{"version":3,"sources":["components/common/icons/add.svg","components/common/icons/copy.svg","components/common/icons/remove.svg","components/common/icons/rotate.svg","utils/copyToClipboard.ts","utils/getAspectRatioString.ts","utils/ScreenInfo.ts","components/forms/ScreenFormBg.tsx","components/common/icons/index.ts","components/forms/ScreenForm.tsx","components/forms/ToggleSwitch.tsx","components/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","copyToClipboard","content","textareaElement","document","createElement","contentEditable","readOnly","value","body","appendChild","range","createRange","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","select","setSelectionRange","length","execCommand","blur","removeChild","MULTIPLIED_BY_9","getAspectRatioString","getAspectRatioStringFromNumber","ratio","RangeError","split","reverse","join","ratio9","Object","keys","ratioString","Math","abs","round","toInches","centimeters","toCentimeters","inches","ScreenInfoBase","width","height","map","pixelCount","toMap","options","newMap","Map","set","toFixed","total","toYaml","Array","from","key","get","integerWidth","floor","integerHeight","this","ScreenInfoWithDiagonal","diagonal","dpi","dotPitch","size","diagonalUnit","sizeUnit","sqrt","tryParsePositiveFloat","isFinite","parsed","parseFloat","getScreenInfo","parseInt","some","isNaN","every","Number","isSafeInteger","floatDiagonal","padding","twentyDegrees","PI","getWidthArrowBodyAttrs","y","x1","y1","x2","y2","ScreenFormBg","props","widthArrowBodyAttrs","heightArrowBodyAttrs","svgLineAttrs","getTransposedSvgLineAttrs","diagonalArrowBodyAttrs","getDiagonalArrowBodyAttrs","widthArrowTips","arrowY","tipHalfWidth","sin","tipHeight","cos","getWidthArrowTips","heightArrowTips","arrowX","getHeightArrowTips","diagonalArrowTips","diagonalAngle","acos","rightCornerXOffset","rightCornerYOffset","leftCornerXOffset","leftCornerYOffset","getDiagonalArrowTips","viewBox","className","points","icons","add","copy","remove","rotate","defaultDisplayedRatio","getFormWidth","maxWidth","getFormHeight","ScreenForm","widthInputRef","useRef","heightInputRef","diagonalInputRef","otherDiagonal","screenInfo","totalPixels","renderedRatio","wrapperStyle","getContainerStyle","ratioStyle","paddingBottom","getRatioStyle","handleInputChangeWith","prop","event","onChange","id","target","handleInputBlur","isWidthEmpty","current","isHeightEmpty","isDiagonalEmpty","onRemove","useEffect","focus","data-testid","style","type","onClick","src","alt","ref","inputMode","title","onBlur","replace","ToggleSwitch","uncheckedSideLabel","checkedSideLabel","checked","buildScreenInfoYamlEntry","toFixedWithoutTrailingZero","integerPart","toString","mantissaLength","App","useState","screenData","setScreenData","screenIdOrder","setScreenIdOrder","nextId","setNextId","setDiagonalUnit","setSizeUnit","handleScreenFormChange","changed","nextScreenFormProps","nextScreenData","handleScreenFormRemove","nextScreenIdOrder","filter","screenForms","screenFormData","screens","reduce","acc","push","yamls","screen","getWholeYaml","newScreenFormProps","addNewScreenForm","nextUnit","parsedDiagonal","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10fc6f2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.0e3e08bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.72dd793a.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.a24d83e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rotate.c91fa003.svg\";","// https://stackoverflow.com/q/34045777\nconst copyToClipboard = function copyStringToClipboard(content: string): void {\n  const textareaElement: HTMLTextAreaElement | null = document.createElement('textarea');\n  if (!textareaElement) {\n    return;\n  }\n\n  textareaElement.contentEditable = 'true';\n  textareaElement.readOnly = false;\n  textareaElement.value = content;\n  document.body.appendChild(textareaElement);\n\n  const range: Range = document.createRange();\n  range.selectNodeContents(textareaElement);\n\n  const selection: Selection | null = window.getSelection();\n  if (!selection) {\n    return;\n  }\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  textareaElement.select();\n  textareaElement.setSelectionRange(0, textareaElement.value.length);\n\n  document.execCommand('copy');\n  textareaElement.blur();\n\n  document.body.removeChild(textareaElement);\n};\n\nexport default copyToClipboard;\n","const MULTIPLIED_BY_9: { [key: string]: number } = {\n  '3:2': 13.5,\n  '4:3': 12,\n  '5:3': 15,\n  '5:4': 11.25,\n  '16:10': 14.4,\n  '17:10': 15.3,\n};\n\nexport const getAspectRatioString = function getAspectRatioStringFromNumber(ratio: number): string {\n  if (ratio <= 0) {\n    throw new RangeError('`ratio` should be a positive number.');\n  }\n\n  if (ratio === 1) {\n    return '1:1';\n  }\n\n  if (ratio < 1) {\n    return getAspectRatioStringFromNumber(1 / ratio).split(':').reverse().join(':');\n  }\n\n  const ratio9: number = ratio * 9;\n  for (const ratioString of Object.keys(MULTIPLIED_BY_9)) {\n    if (Math.abs(MULTIPLIED_BY_9[ratioString] - ratio9) <= 0.0078125) { // `0.0078125` is `2 ** -7`\n      return ratioString;\n    }\n  }\n\n  return `${Math.round(ratio9 * 10) / 10}:9`;\n};\n\nexport default getAspectRatioString;\n","import getAspectRatioString from './getAspectRatioString';\n\nexport type AvailableUnit = 'cm' | 'in';\n\nexport interface UnitOptions {\n  diagonalUnit?: AvailableUnit,\n  sizeUnit?: AvailableUnit,\n};\n\nexport interface PixelCount {\n  readonly width: number,\n  readonly height: number,\n  readonly total: number,\n};\n\nexport interface RectSize {\n  readonly width: number,\n  readonly height: number,\n};\n\nconst INCH_TO_CENTIMETER_FACTOR: number = 2.54;\n\nexport const toInches = function convertCentimetersToInches(centimeters: number): number {\n  return centimeters / INCH_TO_CENTIMETER_FACTOR;\n};\n\nexport const toCentimeters = function convertInchesToCentimeters(inches: number): number {\n  return inches * INCH_TO_CENTIMETER_FACTOR;\n};\n\nexport class ScreenInfoBase {\n  protected map: Map<string, string> | null;\n\n  readonly pixelCount: PixelCount;\n  readonly ratio: number;\n\n  constructor(width: number, height: number) {\n    const integerWidth: number = Math.floor(width);\n    const integerHeight: number = Math.floor(height);\n\n    this.pixelCount = {\n      width: integerWidth,\n      height: integerHeight,\n      total: integerWidth * integerHeight,\n    };\n    this.ratio = integerWidth / integerHeight;\n    this.map = null;\n  }\n\n  toMap = (options?: UnitOptions): Map<string, string> => {\n    if (this.map) {\n      return this.map;\n    }\n\n    const { pixelCount, ratio }: ScreenInfoBase = this;\n    const newMap = new Map();\n    newMap.set('Screen', `${pixelCount.width} x ${pixelCount.height}`);\n    newMap.set('AspectRatio', `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})`);\n    newMap.set('PixelCount', `${pixelCount.total}`);\n    this.map = newMap;\n\n    return newMap;\n  }\n\n  toYaml = (options?: UnitOptions): string => {\n    const map = this.toMap(options);\n    return Array.from(map.keys())\n      .map((key) => `${key}: ${map.get(key)}`)\n      .join('\\n');\n  };\n};\n\nexport class ScreenInfoWithDiagonal extends ScreenInfoBase {\n  readonly diagonal: number;\n  readonly dpi: number;\n  readonly dotPitch: number;\n  readonly size: RectSize;\n\n  constructor(width: number, height: number, diagonal: number) {\n    super(width, height);\n\n    this.diagonal = diagonal;\n    this.dpi = Math.sqrt(this.pixelCount.width ** 2 + this.pixelCount.height ** 2) / diagonal;\n    this.dotPitch = 10 * toCentimeters(1 / this.dpi);\n    this.size = {\n      width: this.pixelCount.width * this.dotPitch / 10,\n      height: this.pixelCount.height * this.dotPitch / 10,\n    };\n  }\n\n  toMap = (options?: UnitOptions): Map<string, string> => {\n    if (this.map) {\n      return this.map;\n    }\n\n    let diagonalUnit: AvailableUnit = 'in';\n    let sizeUnit: AvailableUnit = 'cm';\n    if (options) {\n      ({ diagonalUnit = 'in', sizeUnit = 'cm' } = options);\n    }\n\n    const { pixelCount, diagonal, ratio, dpi, dotPitch, size }: ScreenInfoWithDiagonal = this;\n    const newMap = new Map();\n    newMap.set('Screen', `${pixelCount.width} x ${pixelCount.height}`);\n    newMap.set(\n      'Diagonal',\n      diagonalUnit === 'cm'\n        ? `${toCentimeters(diagonal)} cm`\n        : `${diagonal}\"`\n    );\n    newMap.set('AspectRatio', `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})`);\n    newMap.set('DPI', `${dpi.toFixed(2)}`);\n    newMap.set('DotPitch', `${dotPitch.toFixed(4)}`);\n    newMap.set(\n      'Size',\n      sizeUnit === 'cm'\n        ? `${size.width.toFixed(2)} cm x ${size.height.toFixed(2)} cm`\n        : `${toInches(size.width).toFixed(2)}\" x ${toInches(size.height).toFixed(2)}\"`\n    );\n    newMap.set('PixelCount', `${pixelCount.total}`);\n    this.map = newMap;\n\n    return newMap;\n  }\n};\n\nexport const tryParsePositiveFloat = function parsePositiveFloatOrGetNull(value?: string | number): number | null {\n  if (typeof value === 'number') {\n    if (isFinite(value) && value > 0) {\n      return value;\n    }\n  } else if (typeof value === 'string') {\n    const parsed = parseFloat(value);\n    if (isFinite(parsed) && parsed > 0) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const getScreenInfo = function getScreenInfoFrom(\n  width: number | string,\n  height: number | string,\n  diagonal?: number | string,\n  diagonalUnit?: AvailableUnit,\n) : ScreenInfo | null {\n  const integerWidth: number = typeof width === 'number' ? Math.floor(width) : parseInt(width, 10);\n  const integerHeight: number = typeof height === 'number' ? Math.floor(height) : parseInt(height, 10);\n  if ([integerWidth, integerHeight].some(isNaN)) {\n    return null;\n  }\n  if ([integerWidth, integerHeight].some((value) => value <= 0)) {\n    return null;\n  }\n  if (![integerWidth, integerHeight].every(Number.isSafeInteger)) {\n    return null;\n  }\n\n  let floatDiagonal: number | null = tryParsePositiveFloat(diagonal);\n  if (floatDiagonal && diagonalUnit && diagonalUnit === 'cm') {\n    floatDiagonal /= INCH_TO_CENTIMETER_FACTOR;\n  }\n\n  if (floatDiagonal === null) {\n    return new ScreenInfoBase(integerWidth, integerHeight);\n  }\n  return new ScreenInfoWithDiagonal(integerWidth, integerHeight, floatDiagonal);\n};\n\nexport type ScreenInfo = ScreenInfoWithDiagonal | ScreenInfoBase;\n","import React from 'react';\nimport './ScreenFormBg.css';\n\ninterface ScreenFormBgProps {\n  width: number,\n  height: number,\n}\n\ninterface SvgLineXy {\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n}\n\nconst padding: number = 10;\nconst arrowTipSide: number = 10;\nconst twentyDegrees: number = 20 * Math.PI / 180;\n\nconst getTransposedSvgLineAttrs = function getTransposedSvgLineAttributes(svgLineAttrs: SvgLineXy): SvgLineXy {\n  const { x1, y1, x2, y2 }: SvgLineXy = svgLineAttrs;\n  return {\n    x1: y1,\n    y1: x1,\n    x2: y2,\n    y2: x2,\n  };\n};\n\nconst getWidthArrowBodyAttrs = function getWidthArrowBodyAttributes(width: number, height: number): SvgLineXy {\n  const y = height * 5 / 6;\n  return {\n    x1: padding,\n    y1: y,\n    x2: width - padding,\n    y2: y,\n  };\n};\n\nconst getDiagonalArrowBodyAttrs = function getDiagonalArrowBodyAttributes(width: number, height: number): SvgLineXy {\n  return {\n    x1: padding,\n    y1: height - padding,\n    x2: width - padding,\n    y2: padding,\n  };\n};\n\nconst getWidthArrowTips = function getTipsOfWidthArrow(width: number, height: number): string[] {\n  const arrowY: number = height * 5 / 6;\n  const tipHalfWidth: number = arrowTipSide * Math.sin(twentyDegrees);\n  const tipHeight: number = arrowTipSide * Math.cos(twentyDegrees);\n\n  return [\n    [\n      padding,\n      arrowY,\n      padding + tipHeight,\n      arrowY - tipHalfWidth,\n      padding + tipHeight,\n      arrowY + tipHalfWidth,\n      padding,\n      arrowY,\n    ].join(' '),\n    [\n      width - padding,\n      arrowY,\n      width - (padding + tipHeight),\n      arrowY + tipHalfWidth,\n      width - (padding + tipHeight),\n      arrowY - tipHalfWidth,\n      width - padding,\n      arrowY,\n    ].join(' '),\n  ];\n};\n\nconst getHeightArrowTips = function getTipsOfHeightArrow(width: number, height: number): string[] {\n  const arrowX: number = width * 5 / 6;\n  const tipHalfWidth: number = arrowTipSide * Math.sin(twentyDegrees);\n  const tipHeight: number = arrowTipSide * Math.cos(twentyDegrees);\n\n  return [\n    [\n      arrowX,\n      padding,\n      arrowX + tipHalfWidth,\n      padding + tipHeight,\n      arrowX - tipHalfWidth,\n      padding + tipHeight,\n      arrowX,\n      padding,\n    ].join(' '),\n    [\n      arrowX,\n      height - padding,\n      arrowX - tipHalfWidth,\n      height - (padding + tipHeight),\n      arrowX + tipHalfWidth,\n      height - (padding + tipHeight),\n      arrowX,\n      height - padding,\n    ].join(' '),\n  ];\n};\n\nconst getDiagonalArrowTips = function getTipsOfDiagonalArrow(width: number, height: number): string[] {\n  const diagonalAngle: number = Math.acos(\n    (width - 2 * padding) / Math.sqrt((width - 2 * padding) ** 2 + (height - 2 * padding) ** 2)\n  );\n  const rightCornerXOffset: number = arrowTipSide * Math.cos(diagonalAngle + twentyDegrees);\n  const rightCornerYOffset: number = arrowTipSide * Math.sin(diagonalAngle + twentyDegrees);\n  const leftCornerXOffset: number = arrowTipSide * Math.cos(diagonalAngle - twentyDegrees);\n  const leftCornerYOffset: number = arrowTipSide * Math.sin(diagonalAngle - twentyDegrees);\n\n  return [\n    [\n      padding,\n      height - padding,\n      padding + rightCornerXOffset,\n      height - padding - rightCornerYOffset,\n      padding + leftCornerXOffset,\n      height - padding - leftCornerYOffset,\n      padding,\n      height - padding,\n    ].join(' '),\n    [\n      width - padding,\n      padding,\n      width - padding - rightCornerXOffset,\n      padding + rightCornerYOffset,\n      width - padding - leftCornerXOffset,\n      padding + leftCornerYOffset,\n      width - padding,\n      padding,\n    ].join(' '),\n  ]\n};\n\nfunction ScreenFormBg(props: ScreenFormBgProps) {\n  const { width, height }: ScreenFormBgProps = props;\n\n  const widthArrowBodyAttrs: SvgLineXy = getWidthArrowBodyAttrs(width, height);\n  const heightArrowBodyAttrs: SvgLineXy = getTransposedSvgLineAttrs(getWidthArrowBodyAttrs(height, width));\n  const diagonalArrowBodyAttrs: SvgLineXy = getDiagonalArrowBodyAttrs(width, height);\n\n  const widthArrowTips: string[] = getWidthArrowTips(width, height);\n  const heightArrowTips: string[] = getHeightArrowTips(width, height);\n  const diagonalArrowTips: string[] = getDiagonalArrowTips(width, height);\n\n  return (\n    <svg\n      viewBox={`0 0 ${props.width} ${props.height}`}\n      width=\"100%\"\n    >\n      <line { ...widthArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n      <line { ...heightArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n      <line { ...diagonalArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n\n      <polygon points={widthArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={widthArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={heightArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={heightArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={diagonalArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={diagonalArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n    </svg>\n  );\n}\n\nexport default ScreenFormBg;\n","import add from './add.svg';\nimport copy from './copy.svg';\nimport remove from './remove.svg';\nimport rotate from './rotate.svg';\n\n// Hardcoded for auto completion\ninterface IconCollection {\n  add: string,\n  copy: string,\n  remove: string,\n  rotate: string,\n}\n\nconst icons: IconCollection = {\n  add,\n  copy,\n  remove,\n  rotate,\n};\n\nexport default icons;\n","import React, { useEffect, useRef } from 'react';\nimport ScreenFormBg from './ScreenFormBg';\nimport copyToClipboard from '../../utils/copyToClipboard';\nimport {\n  AvailableUnit,\n  getScreenInfo,\n  RectSize,\n  ScreenInfo,\n  ScreenInfoBase,\n  ScreenInfoWithDiagonal,\n  toCentimeters,\n  toInches,\n  tryParsePositiveFloat,\n} from '../../utils/ScreenInfo';\nimport { getAspectRatioString } from '../../utils/getAspectRatioString';\nimport icons from '../common/icons';\nimport './ScreenForm.css';\n\nexport type ScreenFormPropName = 'width' | 'height' | 'diagonal';\n\nexport interface ScreenFormChangedProps {\n  width?: string,\n  height?: string,\n  diagonal?: string,\n};\n\nexport interface ScreenFormProps {\n  children?: React.ReactNode,\n  id: number,\n  width: string,\n  height: string,\n  diagonal: string,\n  diagonalUnit: AvailableUnit,\n  sizeUnit: AvailableUnit,\n  onChange: (id: number, changed: ScreenFormChangedProps) => void,\n  onRemove: (id: number) => void,\n};\n\nconst { ratio: defaultDisplayedRatio }: { ratio: number } = getScreenInfo(1920, 1080) as ScreenInfoBase;\n\nconst maxWidth: number = 360;\n\nconst getContainerStyle = function getContainerStyleByRatio(ratio: number): { width: string } {\n  if (ratio < 9 / 22) {\n    return { width: `${100 * 9 / 22}%` }; // If ratio < 9:22, fix ratio 9:22\n  } else if (ratio < 1) {\n    return { width: `${100 * ratio}%` }; // If 9:22 <= ratio < 1, use width = ratio\n  } else {\n    return { width: '100%' }; // If ratio >= 1, use width = 100%\n  }\n};\n\nconst getRatioStyle = function getRatioStyleByRatio(ratio: number): { paddingBottom: string } {\n  if (ratio > 22 / 9) {\n    return { paddingBottom: `${100 * 9 / 22}%` }; // If ratio > 22:9, fix ratio 22:9\n  } else if (ratio < 9 / 22) {\n    return { paddingBottom: `${100 * 22 / 9}%` }; // If ratio < 9:22, use ratio 9:22\n  } else {\n    return { paddingBottom: `${100 / ratio}%` }; // If 9:22 <= ratio <= 22:9, use 1 / ratio\n  }\n};\n\nconst getFormWidth = function getFormWidthByPixels(ratio: number): number {\n  if (ratio < 9 / 22) {\n    return maxWidth * 9 / 22; // ratio < 9:22\n  } else if (ratio < 1) {\n    return maxWidth * ratio; // 9:22 <= ratio < 1\n  } else {\n    return maxWidth; // ratio >= 1\n  }\n};\n\nconst getFormHeight = function getFormHeightByPixels(ratio: number): number {\n  if (ratio > 22 / 9) {\n    return maxWidth * 9 / 22; // ratio > 22:9\n  } else if (ratio <= 1) {\n    return maxWidth; // ratio <= 1\n  } else {\n    return maxWidth / ratio; // 1 < ratio <= 22:9\n  }\n};\n\nconst insertCommas = function insertCommasIntoIneger(integer: number): string {\n  return integer.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\nfunction ScreenForm(props: ScreenFormProps) {\n  const widthInputRef = useRef<HTMLInputElement>(null);\n  const heightInputRef = useRef<HTMLInputElement>(null);\n  const diagonalInputRef = useRef<HTMLInputElement>(null);\n\n  const { width, height, diagonal, diagonalUnit, sizeUnit }: ScreenFormProps = props;\n  const floatDiagonal: number | null = tryParsePositiveFloat(diagonal);\n  let otherDiagonal: string = '-';\n  if (floatDiagonal) {\n    if (diagonalUnit === 'in') {\n      otherDiagonal = `${toCentimeters(floatDiagonal).toFixed(2)}cm`;\n    } else {\n      otherDiagonal = `${toInches(floatDiagonal).toFixed(2)}\"`;\n    }\n  }\n\n  const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal, diagonalUnit);\n\n  let ratio: number | null = null;\n  let dpi: number | null = null;\n  let dotPitch: number | null = null;\n  let size: RectSize | null = null;\n  let totalPixels: number | null = null;\n  if (screenInfo instanceof ScreenInfoWithDiagonal) {\n    ({ ratio, dpi, dotPitch, size, pixelCount: { total: totalPixels } } = screenInfo);\n    if (sizeUnit === 'in') {\n      size = {\n        width: toInches(size.width),\n        height: toInches(size.height),\n      };\n    }\n  } else if (screenInfo instanceof ScreenInfoBase) {\n    ({ ratio, pixelCount: { total: totalPixels } } = screenInfo);\n  }\n\n  const renderedRatio: number = ratio || defaultDisplayedRatio;\n  const wrapperStyle: { width: string } = getContainerStyle(renderedRatio);\n  const ratioStyle: { paddingBottom: string } = getRatioStyle(renderedRatio);\n\n  const handleRotateClick = function changeSelfRotated() {\n    props.onChange(props.id, {\n      width: height,\n      height: width,\n    });\n  };\n\n  const handleCopyClick = function copySelf() {\n    if (screenInfo !== null) {\n      copyToClipboard(`${screenInfo.toYaml({ diagonalUnit, sizeUnit })}\\n`);\n    }\n  }\n\n  const handleRemoveClick = function removeSelf() {\n    props.onRemove(props.id);\n  };\n\n  const handleInputChangeWith = function getInputChangeHandlerByProp(prop: ScreenFormPropName) {\n    return function handleInputChange(event: React.ChangeEvent<HTMLInputElement>): void {\n      props.onChange(props.id, { [prop]: event.target.value });\n    };\n  };\n\n  const handleInputBlur = function checkInputsAndRemove(): void {\n    const isWidthEmpty = widthInputRef.current?.value === '';\n    const isHeightEmpty = heightInputRef.current?.value === '';\n    const isDiagonalEmpty = diagonalInputRef.current?.value === '';\n    if (isWidthEmpty && isHeightEmpty && isDiagonalEmpty) {\n      props.onRemove(props.id);\n    }\n  };\n\n  useEffect(() => {\n    widthInputRef.current?.focus();\n  }, []);\n\n  return (\n    <div\n      data-testid=\"ScreenForm\"\n      style={wrapperStyle}\n    >\n      <div className=\"ScreenForm-function\">\n        <button\n          className=\"ScreenForm-function-button\"\n          type=\"button\"\n          onClick={handleRotateClick}\n        >\n          <img src={icons.rotate} alt=\"Rotate\" />\n        </button>\n        <button\n          className=\"ScreenForm-function-button\"\n          type=\"button\"\n          onClick={handleCopyClick}\n        >\n          <img src={icons.copy} alt=\"Copy\" />\n        </button>\n        <button\n          className=\"ScreenForm-function-button-negative\"\n          type=\"button\"\n          onClick={handleRemoveClick}\n        >\n          <img src={icons.remove} alt=\"Remove\" />\n        </button>\n      </div>\n\n      <div className=\"ScreenForm-screen\">\n        <div\n          className=\"ScreenForm-ratio\"\n          style={ratioStyle}\n        />\n\n        <div className=\"ScreenForm-content\">\n          <div className=\"ScreenForm-bg\">\n            <ScreenFormBg\n              width={getFormWidth(renderedRatio)}\n              height={getFormHeight(renderedRatio)}\n            />\n          </div>\n\n          <div className=\"ScreenForm-grid\">\n            <ul className=\"ScreenForm-grid-item ScreenForm-width\">\n              <li>\n                <input\n                  ref={widthInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={width}\n                  inputMode=\"numeric\"\n                  title=\"Width\"\n                  onChange={handleInputChangeWith('width')}\n                  onBlur={handleInputBlur}\n                />&nbsp;px\n              </li>\n              <li>\n                {size ? `${size.width.toFixed(2)}${sizeUnit === 'in' ? '\"' : sizeUnit}` : '-'}\n              </li>\n            </ul>\n            <ul className=\"ScreenForm-grid-item ScreenForm-height\">\n              <li>\n                <input\n                  ref={heightInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={height}\n                  inputMode=\"numeric\"\n                  title=\"Height\"\n                  onChange={handleInputChangeWith('height')}\n                  onBlur={handleInputBlur}\n                />&nbsp;px\n              </li>\n              <li>\n                {size ? `${size.height.toFixed(2)}${sizeUnit === 'in' ? '\"' : sizeUnit}` : '-'}\n              </li>\n            </ul>\n            <ul className=\"ScreenForm-grid-item ScreenForm-diagonal\">\n              <li>\n                <input\n                  ref={diagonalInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={diagonal}\n                  inputMode=\"decimal\"\n                  title=\"Diagonal\"\n                  onChange={handleInputChangeWith('diagonal')}\n                  onBlur={handleInputBlur}\n                />&nbsp;{diagonalUnit}\n              </li>\n              <li>\n                {otherDiagonal}\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"ScreenForm-misc\">\n            <ul className=\"ScreenForm-misc-info\">\n              <li className=\"ScreenForm-misc-pairs\">\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    Aspect&nbsp;ratio&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {ratio ? `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})` : '-'}\n                  </span>\n                </span>\n              </li>\n              <li className=\"ScreenForm-misc-pairs\">\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    DPI&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {dpi ? dpi.toFixed(2) : '-'}\n                  </span>\n                </span>\n                {' '}\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    Dot&nbsp;pitch&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {dotPitch ? `${dotPitch.toFixed(4)}mm` : '-'}\n                  </span>\n                </span>\n              </li>\n              <li className=\"ScreenForm-misc-pairs\">\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    Pixel&nbsp;count&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {totalPixels ? insertCommas(totalPixels) : '-'}\n                  </span>\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ScreenForm;\n","import React from 'react';\nimport './ToggleSwitch.css';\n\nexport interface ToggleSwitchProps {\n  uncheckedSideLabel?: string,\n  checkedSideLabel?: string,\n  checked: boolean,\n  onChange: (checked: boolean) => void,\n};\n\nfunction ToggleSwitch(props: ToggleSwitchProps) {\n  const { uncheckedSideLabel, checkedSideLabel, checked } = props;\n\n  const handleInputChange = function reportToggled(event: React.ChangeEvent<HTMLInputElement>): void {\n    props.onChange(event.target.checked);\n  };\n\n  return (\n    <label className=\"ToggleSwitch\">\n      <span className=\"ToggleSwitch-label\">\n        {uncheckedSideLabel}\n      </span>\n      <input\n        className=\"ToggleSwitch-checkbox\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleInputChange}\n      />\n      <span className=\"ToggleSwitch-switch\">\n        <span className=\"ToggleSwitch-switch-knob\">\n        </span>\n      </span>\n      <span className=\"ToggleSwitch-label\">\n        {checkedSideLabel}\n      </span>\n    </label>\n  );\n}\n\nexport default ToggleSwitch;\n","import React, { useState } from 'react';\nimport copyToClipboard from '../../utils/copyToClipboard';\nimport {\n  AvailableUnit,\n  getScreenInfo,\n  ScreenInfo,\n  toCentimeters,\n  toInches,\n  tryParsePositiveFloat,\n  UnitOptions,\n} from '../../utils/ScreenInfo';\nimport ReactSetState from '../../utils/ReactSetState';\nimport ScreenForm, { ScreenFormChangedProps } from '../forms/ScreenForm';\nimport ToggleSwitch from '../forms/ToggleSwitch';\nimport icons from '../common/icons';\nimport './App.css';\n\ninterface StoredScreenFormProps {\n  id: number,\n  width: string,\n  height: string,\n  diagonal: string,\n  diagonalUnit: AvailableUnit,\n  sizeUnit: AvailableUnit,\n}\n\ninterface ScreenFormData {\n  [id: number]: StoredScreenFormProps,\n}\n\ninterface AddNewScreenFormParam {\n  screenData: ScreenFormData,\n  setScreenData: ReactSetState<ScreenFormData>,\n  screenIdOrder: number[],\n  setScreenIdOrder: ReactSetState<number[]>,\n  nextId: number,\n  setNextId: ReactSetState<number>,\n}\n\nconst buildScreenInfoYamlEntry = function buildScreenInfoYamlEntryOfArray(\n  screenInfo: ScreenInfo,\n  options: UnitOptions,\n): string {\n  const map = screenInfo.toMap(options);\n  return '- ' + Array.from(map.keys()).map((key) => `${key}: ${map.get(key)}`).join('\\n  ');\n};\n\nconst getWholeYaml = function getWholeYamlFromScreenFormData(\n  screenFormData: StoredScreenFormProps[],\n  options: UnitOptions = { diagonalUnit: 'in', sizeUnit: 'cm' },\n): string {\n  const screens: ScreenInfo[] = screenFormData.reduce<ScreenInfo[]>(\n    (acc: ScreenInfo[], props: StoredScreenFormProps) => {\n      const { width, height, diagonal }: StoredScreenFormProps = props;\n      const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal, options.diagonalUnit);\n      if (screenInfo !== null) {\n        acc.push(screenInfo);\n      }\n      return acc;\n    },\n    []\n  );\n  const yamls: string[] = screens.map((screen: ScreenInfo) => buildScreenInfoYamlEntry(screen, options));\n  return yamls.join('\\n\\n') + '\\n';\n};\n\nconst addNewScreenForm = function addNewScreenFormToApp(\n  { screenData, setScreenData, screenIdOrder, setScreenIdOrder, nextId, setNextId }: AddNewScreenFormParam,\n  { diagonalUnit = 'in', sizeUnit = 'cm' }: UnitOptions,\n): void {\n  const id = nextId;\n  setNextId(nextId + 1);\n\n  const newScreenFormProps: StoredScreenFormProps = {\n    id,\n    diagonalUnit,\n    sizeUnit,\n    width: '',\n    height: '',\n    diagonal: '',\n  };\n\n  const nextScreenData: ScreenFormData = { ...screenData, [id]: newScreenFormProps };\n  setScreenData(nextScreenData);\n\n  const nextScreenIdOrder: number[] = [ ...screenIdOrder, id ];\n  setScreenIdOrder(nextScreenIdOrder);\n};\n\nconst toFixedWithoutTrailingZero = function toFixedWithoutTrailingZero(value: number, length: number): string {\n  const integerPart: number = Math.floor(value);\n  if (integerPart === value) {\n    return value.toString();\n  }\n\n  const integerLength: number = integerPart.toString().length;\n  const mantissaLength: number = length - integerLength - 1;\n  return value.toFixed(mantissaLength).replace(/\\.?0+$/, '');\n};\n\nfunction App() {\n  const [ screenData, setScreenData ] = useState<ScreenFormData>({});\n  const [ screenIdOrder, setScreenIdOrder ] = useState<number[]>([]);\n  const [ nextId, setNextId ] = useState<number>(0);\n  const [ diagonalUnit, setDiagonalUnit ] = useState<AvailableUnit>('in');\n  const [ sizeUnit, setSizeUnit ] = useState<AvailableUnit>('cm');\n\n  const handleCopyClick = function handleCopyAsYamlClick(): void {\n    copyToClipboard(getWholeYaml(screenIdOrder.map((id) => screenData[id]), { diagonalUnit, sizeUnit }));\n  };\n\n  const handleAddClick = function handleAddNewScreenFormClick(): void {\n    addNewScreenForm(\n      { screenData, setScreenData, screenIdOrder, setScreenIdOrder, nextId, setNextId },\n      { diagonalUnit, sizeUnit },\n    );\n  };\n\n  const handleScreenFormChange = function handleScreenFormChangeById(\n    id: number,\n    changed: ScreenFormChangedProps,\n  ): void {\n    const nextScreenFormProps: StoredScreenFormProps = { ...screenData[id], ...changed };\n    const nextScreenData: ScreenFormData = { ...screenData, [id]: nextScreenFormProps };\n    setScreenData(nextScreenData);\n  };\n\n  const handleScreenFormRemove = function handleScreenFormRemoveById(id: number): void {\n    const nextScreenData: ScreenFormData = { ...screenData };\n    delete nextScreenData[id];\n    setScreenData(nextScreenData);\n\n    const nextScreenIdOrder: number[] = screenIdOrder.filter((value) => value !== id);\n    setScreenIdOrder(nextScreenIdOrder);\n  };\n\n  const handleDiagonalUnitChange = function handleDiagonalUnitToggleChange(checked: boolean): void {\n    const nextUnit: AvailableUnit = checked ? 'in' : 'cm';\n    setDiagonalUnit(nextUnit);\n\n    const nextScreenData: ScreenFormData = {};\n\n    for (const id of screenIdOrder) {\n      const parsedDiagonal: number | null = tryParsePositiveFloat(screenData[id]?.diagonal);\n      if (typeof parsedDiagonal === 'number') {\n        nextScreenData[id] = {\n          ...screenData[id],\n          diagonal: nextUnit === 'in'\n            ? toFixedWithoutTrailingZero(toInches(parsedDiagonal), 6)\n            : toFixedWithoutTrailingZero(toCentimeters(parsedDiagonal), 6),\n          diagonalUnit: nextUnit,\n        };\n      } else {\n        nextScreenData[id] = {\n          ...screenData[id],\n          diagonalUnit: nextUnit,\n        };\n      }\n    }\n    setScreenData(nextScreenData);\n  };\n\n  const handleSizeUnitChange = function handleSizeUnitToggleChange(checked: boolean): void {\n    const nextUnit: AvailableUnit = checked ? 'in' : 'cm';\n    setSizeUnit(nextUnit);\n\n    const nextScreenData: ScreenFormData = {};\n\n    for (const id of screenIdOrder) {\n      nextScreenData[id] = {\n        ...screenData[id],\n        sizeUnit: nextUnit,\n      };\n    }\n    setScreenData(nextScreenData);\n  };\n\n  const screenForms = screenIdOrder.map((id) => (\n    <ScreenForm\n      { ...screenData[id] }\n      key={id}\n      onChange={handleScreenFormChange}\n      onRemove={handleScreenFormRemove}\n    />\n  ));\n\n  return (\n    <div className=\"App\" data-testid=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-header-title\">\n          Aspect Ratio Calculator\n        </h1>\n        <div className=\"App-header-button-container\">\n          <button\n            className=\"App-header-button\"\n            type=\"button\"\n            onClick={handleCopyClick}\n          >\n            <img src={icons.copy} alt=\"Copy all\" />\n          </button>\n        </div>\n      </header>\n\n      <main className=\"App-main\">\n        {screenForms}\n\n        <div className=\"App-main-add\">\n          <div className=\"App-main-add-ratio\" />\n          <button\n            className=\"App-main-add-button\"\n            type=\"button\"\n            onClick={handleAddClick}\n          >\n            <img src={icons.add} alt=\"Add\" />\n          </button>\n        </div>\n      </main>\n\n      <footer className=\"App-footer\">\n        <h2 className=\"App-footer-title\">\n          Options\n        </h2>\n        <ul className=\"App-footer-config\">\n          <li className=\"App-footer-config-list\">\n            <span className=\"App-footer-config-key\">\n              Width/Height\n            </span>\n            <span className=\"App-footer-config-value\">\n              <ToggleSwitch\n                checkedSideLabel=\"in\"\n                uncheckedSideLabel=\"cm\"\n                checked={sizeUnit === 'in'}\n                onChange={handleSizeUnitChange}\n              />\n            </span>\n          </li>\n          <li className=\"App-footer-config-list\">\n            <span className=\"App-footer-config-key\">\n              Diagonal\n            </span>\n            <span className=\"App-footer-config-value\">\n              <ToggleSwitch\n                checkedSideLabel=\"in\"\n                uncheckedSideLabel=\"cm\"\n                checked={diagonalUnit === 'in'}\n                onChange={handleDiagonalUnitChange}\n              />\n            </span>\n          </li>\n        </ul>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}