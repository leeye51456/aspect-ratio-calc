{"version":3,"sources":["components/common/icons/add.svg","components/common/icons/copy.svg","components/common/icons/remove.svg","components/common/icons/rotate.svg","utils/copyToClipboard.ts","utils/getAspectRatioString.ts","utils/ScreenInfo.ts","components/forms/ScreenFormBg.tsx","components/common/icons/index.ts","components/forms/ScreenForm.tsx","components/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","copyToClipboard","content","textareaElement","document","createElement","contentEditable","readOnly","value","body","appendChild","range","createRange","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","select","setSelectionRange","length","execCommand","blur","removeChild","MULTIPLIED_BY_9","getAspectRatioString","getAspectRatioStringFromNumber","ratio","RangeError","split","reverse","join","ratio9","Object","keys","ratioString","Math","abs","round","ScreenInfoBase","width","height","map","pixelCount","toMap","newMap","Map","set","toFixed","total","toYaml","Array","from","key","get","integerWidth","floor","integerHeight","this","ScreenInfoWithDiagonal","diagonal","dpi","dotPitch","size","sqrt","getScreenInfo","parseInt","some","isNaN","every","Number","isSafeInteger","floatDiagonal","isFinite","parsed","parseFloat","padding","twentyDegrees","PI","getWidthArrowBodyAttrs","y","x1","y1","x2","y2","ScreenFormBg","props","widthArrowBodyAttrs","heightArrowBodyAttrs","svgLineAttrs","getTransposedSvgLineAttrs","diagonalArrowBodyAttrs","getDiagonalArrowBodyAttrs","widthArrowTips","arrowY","tipHalfWidth","sin","tipHeight","cos","getWidthArrowTips","heightArrowTips","arrowX","getHeightArrowTips","diagonalArrowTips","diagonalAngle","acos","rightCornerXOffset","rightCornerYOffset","leftCornerXOffset","leftCornerYOffset","getDiagonalArrowTips","viewBox","className","points","icons","add","copy","remove","rotate","defaultDisplayedRatio","getFormWidth","maxWidth","getFormHeight","ScreenForm","widthInputRef","useRef","heightInputRef","diagonalInputRef","screenInfo","totalPixels","renderedRatio","wrapperStyle","getContainerStyle","ratioStyle","paddingBottom","getRatioStyle","handleInputChangeWith","prop","event","onChange","id","target","handleInputBlur","isWidthEmpty","current","isHeightEmpty","isDiagonalEmpty","onRemove","useEffect","focus","data-testid","style","type","onClick","src","alt","ref","inputMode","title","onBlur","replace","getWholeYaml","screenFormData","reduce","acc","push","screen","buildScreenInfoYamlEntry","App","useState","screenData","setScreenData","screenIdOrder","setScreenIdOrder","nextId","setNextId","handleScreenFormChange","changed","nextScreenFormProps","nextScreenData","handleScreenFormRemove","nextScreenIdOrder","filter","screenForms","newScreenFormProps","addNewScreenForm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d72fb035.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.0e3e08bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.72dd793a.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.a24d83e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rotate.c91fa003.svg\";","// https://stackoverflow.com/q/34045777\nconst copyToClipboard = function copyStringToClipboard(content: string): void {\n  const textareaElement: HTMLTextAreaElement | null = document.createElement('textarea');\n  if (!textareaElement) {\n    return;\n  }\n\n  textareaElement.contentEditable = 'true';\n  textareaElement.readOnly = false;\n  textareaElement.value = content;\n  document.body.appendChild(textareaElement);\n\n  const range: Range = document.createRange();\n  range.selectNodeContents(textareaElement);\n\n  const selection: Selection | null = window.getSelection();\n  if (!selection) {\n    return;\n  }\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  textareaElement.select();\n  textareaElement.setSelectionRange(0, textareaElement.value.length);\n\n  document.execCommand('copy');\n  textareaElement.blur();\n\n  document.body.removeChild(textareaElement);\n};\n\nexport default copyToClipboard;\n","const MULTIPLIED_BY_9: { [key: string]: number } = {\n  '3:2': 13.5,\n  '4:3': 12,\n  '5:3': 15,\n  '5:4': 11.25,\n  '16:10': 14.4,\n  '17:10': 15.3,\n};\n\nexport const getAspectRatioString = function getAspectRatioStringFromNumber(ratio: number): string {\n  if (ratio <= 0) {\n    throw new RangeError('`ratio` should be a positive number.');\n  }\n\n  if (ratio === 1) {\n    return '1:1';\n  }\n\n  if (ratio < 1) {\n    return getAspectRatioStringFromNumber(1 / ratio).split(':').reverse().join(':');\n  }\n\n  const ratio9: number = ratio * 9;\n  for (const ratioString of Object.keys(MULTIPLIED_BY_9)) {\n    if (Math.abs(MULTIPLIED_BY_9[ratioString] - ratio9) <= 0.0078125) { // `0.0078125` is `2 ** -7`\n      return ratioString;\n    }\n  }\n\n  return `${Math.round(ratio9 * 10) / 10}:9`;\n};\n\nexport default getAspectRatioString;\n","import getAspectRatioString from './getAspectRatioString';\n\nexport interface PixelCount {\n  readonly width: number,\n  readonly height: number,\n  readonly total: number,\n};\n\nexport interface RectSize {\n  readonly width: number,\n  readonly height: number,\n};\n\nconst INCH_TO_CENTIMETER_FACTOR: number = 2.54;\n\nexport class ScreenInfoBase {\n  protected map: Map<string, string> | null;\n\n  readonly pixelCount: PixelCount;\n  readonly ratio: number;\n\n  constructor(width: number, height: number) {\n    const integerWidth: number = Math.floor(width);\n    const integerHeight: number = Math.floor(height);\n\n    this.pixelCount = {\n      width: integerWidth,\n      height: integerHeight,\n      total: integerWidth * integerHeight,\n    };\n    this.ratio = integerWidth / integerHeight;\n    this.map = null;\n  }\n\n  toMap = (): Map<string, string> => {\n    if (this.map) {\n      return this.map;\n    }\n\n    const { pixelCount, ratio }: ScreenInfoBase = this;\n    const newMap = new Map();\n    newMap.set('Screen', `${pixelCount.width} x ${pixelCount.height}`);\n    newMap.set('AspectRatio', `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})`);\n    newMap.set('PixelCount', `${pixelCount.total}`);\n    this.map = newMap;\n\n    return newMap;\n  }\n\n  toYaml = (): string => {\n    const map = this.toMap();\n    return Array.from(map.keys())\n      .map((key) => `${key}: ${map.get(key)}`)\n      .join('\\n');\n  };\n};\n\nexport class ScreenInfoWithDiagonal extends ScreenInfoBase {\n  readonly diagonal: number;\n  readonly dpi: number;\n  readonly dotPitch: number;\n  readonly size: RectSize;\n\n  constructor(width: number, height: number, diagonal: number) {\n    super(width, height);\n\n    this.diagonal = diagonal;\n    this.dpi = Math.sqrt(this.pixelCount.width ** 2 + this.pixelCount.height ** 2) / diagonal;\n    this.dotPitch = 10 * INCH_TO_CENTIMETER_FACTOR / this.dpi;\n    this.size = {\n      width: this.pixelCount.width * this.dotPitch / 10,\n      height: this.pixelCount.height * this.dotPitch / 10,\n    };\n  }\n\n  toMap = (): Map<string, string> => {\n    if (this.map) {\n      return this.map;\n    }\n\n    const { pixelCount, diagonal, ratio, dpi, dotPitch, size }: ScreenInfoWithDiagonal = this;\n    const newMap = new Map();\n    newMap.set('Screen', `${pixelCount.width} x ${pixelCount.height}`);\n    newMap.set('Diagonal', `${diagonal}\"`);\n    newMap.set('AspectRatio', `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})`);\n    newMap.set('DPI', `${dpi.toFixed(2)}`);\n    newMap.set('DotPitch', `${dotPitch.toFixed(4)}`);\n    newMap.set('Size', `${size.width.toFixed(2)} cm x ${size.height.toFixed(2)} cm`);\n    newMap.set('PixelCount', `${pixelCount.total}`);\n    this.map = newMap;\n\n    return newMap;\n  }\n};\n\nexport const getScreenInfo = function getScreenInfoFrom(\n  width: number | string,\n  height: number | string,\n  diagonal?: number | string,\n) : ScreenInfo | null {\n  const integerWidth: number = typeof width === 'number' ? Math.floor(width) : parseInt(width, 10);\n  const integerHeight: number = typeof height === 'number' ? Math.floor(height) : parseInt(height, 10);\n  if ([integerWidth, integerHeight].some(isNaN)) {\n    return null;\n  }\n  if ([integerWidth, integerHeight].some((value) => value <= 0)) {\n    return null;\n  }\n  if (![integerWidth, integerHeight].every(Number.isSafeInteger)) {\n    return null;\n  }\n\n  let floatDiagonal: number | null = null;\n  if (typeof diagonal === 'number') {\n    if (isFinite(diagonal) && diagonal > 0) {\n      floatDiagonal = diagonal;\n    }\n  } else if (typeof diagonal === 'string') {\n    const parsed = parseFloat(diagonal);\n    if (isFinite(parsed) && parsed > 0) {\n      floatDiagonal = parsed;\n    }\n  }\n\n  if (floatDiagonal === null) {\n    return new ScreenInfoBase(integerWidth, integerHeight);\n  }\n  return new ScreenInfoWithDiagonal(integerWidth, integerHeight, floatDiagonal);\n};\n\nexport type ScreenInfo = ScreenInfoWithDiagonal | ScreenInfoBase;\n","import React from 'react';\nimport './ScreenFormBg.css';\n\ninterface ScreenFormBgProps {\n  width: number,\n  height: number,\n}\n\ninterface SvgLineXy {\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n}\n\nconst padding: number = 10;\nconst arrowTipSide: number = 10;\nconst twentyDegrees: number = 20 * Math.PI / 180;\n\nconst getTransposedSvgLineAttrs = function getTransposedSvgLineAttributes(svgLineAttrs: SvgLineXy): SvgLineXy {\n  const { x1, y1, x2, y2 }: SvgLineXy = svgLineAttrs;\n  return {\n    x1: y1,\n    y1: x1,\n    x2: y2,\n    y2: x2,\n  };\n};\n\nconst getWidthArrowBodyAttrs = function getWidthArrowBodyAttributes(width: number, height: number): SvgLineXy {\n  const y = height * 5 / 6;\n  return {\n    x1: padding,\n    y1: y,\n    x2: width - padding,\n    y2: y,\n  };\n};\n\nconst getDiagonalArrowBodyAttrs = function getDiagonalArrowBodyAttributes(width: number, height: number): SvgLineXy {\n  return {\n    x1: padding,\n    y1: height - padding,\n    x2: width - padding,\n    y2: padding,\n  };\n};\n\nconst getWidthArrowTips = function getTipsOfWidthArrow(width: number, height: number): string[] {\n  const arrowY: number = height * 5 / 6;\n  const tipHalfWidth: number = arrowTipSide * Math.sin(twentyDegrees);\n  const tipHeight: number = arrowTipSide * Math.cos(twentyDegrees);\n\n  return [\n    [\n      padding,\n      arrowY,\n      padding + tipHeight,\n      arrowY - tipHalfWidth,\n      padding + tipHeight,\n      arrowY + tipHalfWidth,\n      padding,\n      arrowY,\n    ].join(' '),\n    [\n      width - padding,\n      arrowY,\n      width - (padding + tipHeight),\n      arrowY + tipHalfWidth,\n      width - (padding + tipHeight),\n      arrowY - tipHalfWidth,\n      width - padding,\n      arrowY,\n    ].join(' '),\n  ];\n};\n\nconst getHeightArrowTips = function getTipsOfHeightArrow(width: number, height: number): string[] {\n  const arrowX: number = width * 5 / 6;\n  const tipHalfWidth: number = arrowTipSide * Math.sin(twentyDegrees);\n  const tipHeight: number = arrowTipSide * Math.cos(twentyDegrees);\n\n  return [\n    [\n      arrowX,\n      padding,\n      arrowX + tipHalfWidth,\n      padding + tipHeight,\n      arrowX - tipHalfWidth,\n      padding + tipHeight,\n      arrowX,\n      padding,\n    ].join(' '),\n    [\n      arrowX,\n      height - padding,\n      arrowX - tipHalfWidth,\n      height - (padding + tipHeight),\n      arrowX + tipHalfWidth,\n      height - (padding + tipHeight),\n      arrowX,\n      height - padding,\n    ].join(' '),\n  ];\n};\n\nconst getDiagonalArrowTips = function getTipsOfDiagonalArrow(width: number, height: number): string[] {\n  const diagonalAngle: number = Math.acos(\n    (width - 2 * padding) / Math.sqrt((width - 2 * padding) ** 2 + (height - 2 * padding) ** 2)\n  );\n  const rightCornerXOffset: number = arrowTipSide * Math.cos(diagonalAngle + twentyDegrees);\n  const rightCornerYOffset: number = arrowTipSide * Math.sin(diagonalAngle + twentyDegrees);\n  const leftCornerXOffset: number = arrowTipSide * Math.cos(diagonalAngle - twentyDegrees);\n  const leftCornerYOffset: number = arrowTipSide * Math.sin(diagonalAngle - twentyDegrees);\n\n  return [\n    [\n      padding,\n      height - padding,\n      padding + rightCornerXOffset,\n      height - padding - rightCornerYOffset,\n      padding + leftCornerXOffset,\n      height - padding - leftCornerYOffset,\n      padding,\n      height - padding,\n    ].join(' '),\n    [\n      width - padding,\n      padding,\n      width - padding - rightCornerXOffset,\n      padding + rightCornerYOffset,\n      width - padding - leftCornerXOffset,\n      padding + leftCornerYOffset,\n      width - padding,\n      padding,\n    ].join(' '),\n  ]\n};\n\nfunction ScreenFormBg(props: ScreenFormBgProps) {\n  const { width, height }: ScreenFormBgProps = props;\n\n  const widthArrowBodyAttrs: SvgLineXy = getWidthArrowBodyAttrs(width, height);\n  const heightArrowBodyAttrs: SvgLineXy = getTransposedSvgLineAttrs(getWidthArrowBodyAttrs(height, width));\n  const diagonalArrowBodyAttrs: SvgLineXy = getDiagonalArrowBodyAttrs(width, height);\n\n  const widthArrowTips: string[] = getWidthArrowTips(width, height);\n  const heightArrowTips: string[] = getHeightArrowTips(width, height);\n  const diagonalArrowTips: string[] = getDiagonalArrowTips(width, height);\n\n  return (\n    <svg\n      viewBox={`0 0 ${props.width} ${props.height}`}\n      width=\"100%\"\n    >\n      <line { ...widthArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n      <line { ...heightArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n      <line { ...diagonalArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n\n      <polygon points={widthArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={widthArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={heightArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={heightArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={diagonalArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={diagonalArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n    </svg>\n  );\n}\n\nexport default ScreenFormBg;\n","import add from './add.svg';\nimport copy from './copy.svg';\nimport remove from './remove.svg';\nimport rotate from './rotate.svg';\n\n// Hardcoded for auto completion\ninterface IconCollection {\n  add: string,\n  copy: string,\n  remove: string,\n  rotate: string,\n}\n\nconst icons: IconCollection = {\n  add,\n  copy,\n  remove,\n  rotate,\n};\n\nexport default icons;\n","import React, { useEffect, useRef } from 'react';\nimport ScreenFormBg from './ScreenFormBg';\nimport copyToClipboard from '../../utils/copyToClipboard';\nimport {\n  getScreenInfo,\n  RectSize,\n  ScreenInfo,\n  ScreenInfoBase,\n  ScreenInfoWithDiagonal\n} from '../../utils/ScreenInfo';\nimport { getAspectRatioString } from '../../utils/getAspectRatioString';\nimport icons from '../common/icons';\nimport './ScreenForm.css';\n\nexport type ScreenFormPropName = 'width' | 'height' | 'diagonal';\n\nexport interface ScreenFormChangedProps {\n  width?: string,\n  height?: string,\n  diagonal?: string,\n};\n\nexport interface ScreenFormProps {\n  children?: React.ReactNode,\n  id: number,\n  width: string,\n  height: string,\n  diagonal: string,\n  onChange: (id: number, changed: ScreenFormChangedProps) => void,\n  onRemove: (id: number) => void,\n};\n\nconst { ratio: defaultDisplayedRatio }: { ratio: number } = getScreenInfo(1920, 1080, 24) as ScreenInfoWithDiagonal;\n\nconst maxWidth: number = 360;\n\nconst getContainerStyle = function getContainerStyleByRatio(ratio: number): { width: string } {\n  if (ratio < 9 / 22) {\n    return { width: `${100 * 9 / 22}%` }; // If ratio < 9:22, fix ratio 9:22\n  } else if (ratio < 1) {\n    return { width: `${100 * ratio}%` }; // If 9:22 <= ratio < 1, use width = ratio\n  } else {\n    return { width: '100%' }; // If ratio >= 1, use width = 100%\n  }\n};\n\nconst getRatioStyle = function getRatioStyleByRatio(ratio: number): { paddingBottom: string } {\n  if (ratio > 22 / 9) {\n    return { paddingBottom: `${100 * 9 / 22}%` }; // If ratio > 22:9, fix ratio 22:9\n  } else if (ratio < 9 / 22) {\n    return { paddingBottom: `${100 * 22 / 9}%` }; // If ratio < 9:22, use ratio 9:22\n  } else {\n    return { paddingBottom: `${100 / ratio}%` }; // If 9:22 <= ratio <= 22:9, use 1 / ratio\n  }\n};\n\nconst getFormWidth = function getFormWidthByPixels(ratio: number): number {\n  if (ratio < 9 / 22) {\n    return maxWidth * 9 / 22; // ratio < 9:22\n  } else if (ratio < 1) {\n    return maxWidth * ratio; // 9:22 <= ratio < 1\n  } else {\n    return maxWidth; // ratio >= 1\n  }\n};\n\nconst getFormHeight = function getFormHeightByPixels(ratio: number): number {\n  if (ratio > 22 / 9) {\n    return maxWidth * 9 / 22; // ratio > 22:9\n  } else if (ratio <= 1) {\n    return maxWidth; // ratio <= 1\n  } else {\n    return maxWidth / ratio; // 1 < ratio <= 22:9\n  }\n};\n\nconst insertCommas = function insertCommasIntoIneger(integer: number): string {\n  return integer.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\nfunction ScreenForm(props: ScreenFormProps) {\n  const widthInputRef = useRef<HTMLInputElement>(null);\n  const heightInputRef = useRef<HTMLInputElement>(null);\n  const diagonalInputRef = useRef<HTMLInputElement>(null);\n\n  const { width, height, diagonal }: ScreenFormProps = props;\n  const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal);\n\n  let ratio: number | null = null;\n  let dpi: number | null = null;\n  let dotPitch: number | null = null;\n  let size: RectSize | null = null;\n  let totalPixels: number | null = null;\n  if (screenInfo instanceof ScreenInfoWithDiagonal) {\n    ({ ratio, dpi, dotPitch, size, pixelCount: { total: totalPixels } } = screenInfo);\n  } else if (screenInfo instanceof ScreenInfoBase) {\n    ({ ratio, pixelCount: { total: totalPixels } } = screenInfo);\n  }\n\n  const renderedRatio: number = ratio || defaultDisplayedRatio;\n  const wrapperStyle: { width: string } = getContainerStyle(renderedRatio);\n  const ratioStyle: { paddingBottom: string } = getRatioStyle(renderedRatio);\n\n  const handleRotateClick = function changeSelfRotated() {\n    props.onChange(props.id, {\n      width: props.height,\n      height: props.width,\n    });\n  };\n\n  const handleCopyClick = function copySelf() {\n    const { width, height, diagonal }: ScreenFormProps = props;\n    const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal);\n    if (screenInfo !== null) {\n      copyToClipboard(`${screenInfo.toYaml()}\\n`);\n    }\n  }\n\n  const handleRemoveClick = function removeSelf() {\n    props.onRemove(props.id);\n  };\n\n  const handleInputChangeWith = function getInputChangeHandlerByProp(prop: ScreenFormPropName) {\n    return function handleInputChange(event: React.ChangeEvent<HTMLInputElement>): void {\n      props.onChange(props.id, { [prop]: event.target.value });\n    };\n  };\n\n  const handleInputBlur = function checkInputsAndRemove(): void {\n    const isWidthEmpty = widthInputRef.current?.value === '';\n    const isHeightEmpty = heightInputRef.current?.value === '';\n    const isDiagonalEmpty = diagonalInputRef.current?.value === '';\n    if (isWidthEmpty && isHeightEmpty && isDiagonalEmpty) {\n      props.onRemove(props.id);\n    }\n  };\n\n  useEffect(() => {\n    widthInputRef.current?.focus();\n  }, []);\n\n  return (\n    <div\n      data-testid=\"ScreenForm\"\n      style={wrapperStyle}\n    >\n      <div className=\"ScreenForm-function\">\n        <button\n          className=\"ScreenForm-function-button\"\n          type=\"button\"\n          onClick={handleRotateClick}\n        >\n          <img src={icons.rotate} alt=\"Rotate\" />\n        </button>\n        <button\n          className=\"ScreenForm-function-button\"\n          type=\"button\"\n          onClick={handleCopyClick}\n        >\n          <img src={icons.copy} alt=\"Copy\" />\n        </button>\n        <button\n          className=\"ScreenForm-function-button-negative\"\n          type=\"button\"\n          onClick={handleRemoveClick}\n        >\n          <img src={icons.remove} alt=\"Remove\" />\n        </button>\n      </div>\n\n      <div\n        className=\"ScreenForm-screen\"\n      >\n        <div\n          className=\"ScreenForm-ratio\"\n          style={ratioStyle}\n        />\n\n        <div className=\"ScreenForm-content\">\n          <div className=\"ScreenForm-bg\">\n            <ScreenFormBg width={getFormWidth(renderedRatio)} height={getFormHeight(renderedRatio)} />\n          </div>\n\n          <div className=\"ScreenForm-grid\">\n            <ul className=\"ScreenForm-grid-item ScreenForm-width\">\n              <li>\n                <input\n                  ref={widthInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={props.width}\n                  inputMode=\"numeric\"\n                  title=\"Width\"\n                  onChange={handleInputChangeWith('width')}\n                  onBlur={handleInputBlur}\n                />&nbsp;px\n              </li>\n              <li>\n                {size ? `${size.width.toFixed(2)}cm` : '-'}\n              </li>\n            </ul>\n            <ul className=\"ScreenForm-grid-item ScreenForm-height\">\n              <li>\n                <input\n                  ref={heightInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={props.height}\n                  inputMode=\"numeric\"\n                  title=\"Height\"\n                  onChange={handleInputChangeWith('height')}\n                  onBlur={handleInputBlur}\n                />&nbsp;px\n              </li>\n              <li>\n                {size ? `${size.height.toFixed(2)}cm` : '-'}\n              </li>\n            </ul>\n            <ul className=\"ScreenForm-grid-item ScreenForm-diagonal\">\n              <li>\n                <input\n                  ref={diagonalInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={props.diagonal}\n                  inputMode=\"decimal\"\n                  title=\"Diagonal\"\n                  onChange={handleInputChangeWith('diagonal')}\n                  onBlur={handleInputBlur}\n                />&nbsp;in\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"ScreenForm-misc\">\n            <ul className=\"ScreenForm-misc-info\">\n              <li className=\"ScreenForm-misc-pairs\">\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    Aspect&nbsp;ratio&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {ratio ? `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})` : '-'}\n                  </span>\n                </span>\n              </li>\n              <li className=\"ScreenForm-misc-pairs\">\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    DPI&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {dpi ? dpi.toFixed(2) : '-'}\n                  </span>\n                </span>\n                {' '}\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    Dot&nbsp;pitch&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {dotPitch ? `${dotPitch.toFixed(4)}mm` : '-'}\n                  </span>\n                </span>\n              </li>\n              <li className=\"ScreenForm-misc-pairs\">\n                <span className=\"ScreenForm-misc-pair\">\n                  <span className=\"ScreenForm-misc-key\">\n                    Pixel&nbsp;count&nbsp;\n                  </span>\n                  <span className=\"ScreenForm-misc-value\">\n                    {totalPixels ? insertCommas(totalPixels) : '-'}\n                  </span>\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ScreenForm;\n","import React, { useState } from 'react';\nimport copyToClipboard from '../../utils/copyToClipboard';\nimport {\n  getScreenInfo,\n  ScreenInfo,\n} from '../../utils/ScreenInfo';\nimport ReactSetState from '../../utils/ReactSetState';\nimport ScreenForm, { ScreenFormChangedProps } from '../forms/ScreenForm';\nimport icons from '../common/icons';\nimport './App.css';\n\ninterface ScreenFormProps {\n  id: number,\n  width: string,\n  height: string,\n  diagonal: string,\n}\n\ninterface ScreenFormData {\n  [id: number]: ScreenFormProps,\n}\n\ninterface AddNewScreenFormParam {\n  screenData: ScreenFormData,\n  setScreenData: ReactSetState<ScreenFormData>,\n  screenIdOrder: number[],\n  setScreenIdOrder: ReactSetState<number[]>,\n  nextId: number,\n  setNextId: ReactSetState<number>,\n}\n\nconst buildScreenInfoYamlEntry = function buildScreenInfoYamlEntryOfArray(screenInfo: ScreenInfo): string {\n  const map = screenInfo.toMap();\n  return '- ' + Array.from(map.keys()).map((key) => `${key}: ${map.get(key)}`).join('\\n  ');\n};\n\nconst getWholeYaml = function getWholeYamlFromScreenFormData(screenFormData: ScreenFormProps[]): string {\n  const screens: ScreenInfo[] = screenFormData.reduce<ScreenInfo[]>(\n    (acc: ScreenInfo[], props: ScreenFormProps) => {\n      const { width, height, diagonal }: ScreenFormProps = props;\n      const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal);\n      if (screenInfo !== null) {\n        acc.push(screenInfo);\n      }\n      return acc;\n    },\n    []\n  );\n  const yamls: string[] = screens.map((screen: ScreenInfo) => buildScreenInfoYamlEntry(screen));\n  return yamls.join('\\n\\n') + '\\n';\n};\n\nconst addNewScreenForm = function addNewScreenFormToApp(\n  {\n    screenData,\n    setScreenData,\n    screenIdOrder,\n    setScreenIdOrder,\n    nextId,\n    setNextId,\n  }: AddNewScreenFormParam\n): void {\n  const id = nextId;\n  setNextId(nextId + 1);\n\n  const newScreenFormProps: ScreenFormProps = {\n    id,\n    width: '',\n    height: '',\n    diagonal: '',\n  };\n\n  const nextScreenData: ScreenFormData = { ...screenData, [id]: newScreenFormProps };\n  setScreenData(nextScreenData);\n\n  const nextScreenIdOrder: number[] = [ ...screenIdOrder, id ];\n  setScreenIdOrder(nextScreenIdOrder);\n};\n\nfunction App() {\n  const [ screenData, setScreenData ] = useState<ScreenFormData>({});\n  const [ screenIdOrder, setScreenIdOrder ] = useState<number[]>([]);\n  const [ nextId, setNextId ] = useState(0);\n\n  const handleCopyClick = function handleCopyAsYamlClick(): void {\n    copyToClipboard(getWholeYaml(screenIdOrder.map((id) => screenData[id])));\n  };\n\n  const handleAddClick = function handleAddNewScreenFormClick(): void {\n    addNewScreenForm(\n      { screenData, setScreenData, screenIdOrder, setScreenIdOrder, nextId, setNextId }\n    );\n  };\n\n  const handleScreenFormChange = function handleScreenFormChangeById(\n    id: number,\n    changed: ScreenFormChangedProps,\n  ): void {\n    const nextScreenFormProps: ScreenFormProps = { ...screenData[id], ...changed };\n    const nextScreenData: ScreenFormData = { ...screenData, [id]: nextScreenFormProps };\n    setScreenData(nextScreenData);\n  };\n\n  const handleScreenFormRemove = function handleScreenFormRemoveById(id: number): void {\n    const nextScreenData: ScreenFormData = { ...screenData };\n    delete nextScreenData[id];\n    setScreenData(nextScreenData);\n\n    const nextScreenIdOrder: number[] = screenIdOrder.filter((value) => value !== id);\n    setScreenIdOrder(nextScreenIdOrder);\n  };\n\n  const screenForms = screenIdOrder.map((id) => (\n    <ScreenForm\n      { ...screenData[id] }\n      key={id}\n      onChange={handleScreenFormChange}\n      onRemove={handleScreenFormRemove}\n    />\n  ));\n\n  return (\n    <div className=\"App\" data-testid=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-header-title\">\n          Aspect Ratio Calculator\n        </h1>\n        <div className=\"App-header-button-container\">\n          <button\n            className=\"App-header-button\"\n            type=\"button\"\n            onClick={handleCopyClick}\n          >\n            <img src={icons.copy} alt=\"Copy all\" />\n          </button>\n        </div>\n      </header>\n\n      <main className=\"App-main\">\n        {screenForms}\n\n        <div className=\"App-main-add\">\n          <div className=\"App-main-add-ratio\" />\n          <button\n            className=\"App-main-add-button\"\n            type=\"button\"\n            onClick={handleAddClick}\n          >\n            <img src={icons.add} alt=\"Add\" />\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}