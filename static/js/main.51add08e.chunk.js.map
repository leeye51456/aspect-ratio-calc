{"version":3,"sources":["components/common/icons/add.svg","components/common/icons/copy.svg","components/common/icons/remove.svg","components/common/icons/rotate.svg","utils/number.ts","utils/getAspectRatioString.ts","utils/ScreenInfo.ts","hooks/useScreenData.ts","utils/copyToClipboard.ts","utils/yaml.ts","components/forms/ScreenForm/styleFunctions.ts","components/forms/ScreenForm/ScreenFormBg/attributeFunctions.ts","components/forms/ScreenForm/ScreenFormBg/index.tsx","components/common/icons/index.ts","components/forms/ScreenForm/ScreenFormMisc.tsx","components/forms/ScreenForm/index.tsx","components/forms/ToggleSwitch.tsx","components/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","toFixedWithoutTrailingZero","value","length","integerPart","Math","floor","toString","mantissaLength","toFixed","replace","tryParsePositiveFloat","isFinite","parsed","parseFloat","MULTIPLIED_BY_9","getAspectRatioString","getAspectRatioStringFromNumber","ratio","RangeError","split","reverse","join","ratio9","Object","keys","ratioString","abs","round","toInches","centimeters","toCentimeters","inches","ScreenInfoBase","width","height","map","pixelCount","toMap","options","newMap","Map","set","total","integerWidth","integerHeight","this","ScreenInfoWithDiagonal","diagonal","dpi","dotPitch","size","diagonalUnit","sizeUnit","sqrt","getScreenInfo","parseInt","some","isNaN","every","Number","isSafeInteger","floatDiagonal","defaults","window","devicePixelRatio","screen","data","0","id","idOrder","nextId","getConvertedTo","nextUnit","useScreenData","useState","setData","setIdOrder","setNextId","setDiagonalUnit","setSizeUnit","add","screenFormProps","newScreenFormProps","nextData","nextIdOrder","update","nextScreenFormProps","remove","filter","units","change","nextScreenData","parsedDiagonal","changeDiagonalUnit","copyToClipboard","content","textareaElement","document","createElement","contentEditable","readOnly","body","appendChild","range","createRange","selectNodeContents","selection","getSelection","removeAllRanges","addRange","select","setSelectionRange","execCommand","blur","removeChild","buildScreenInfoYamlEntry","screenInfo","Array","from","key","get","getFormWidth","maxWidth","getFormHeight","padding","twentyDegrees","PI","getWidthArrowBodyAttrs","y","x1","y1","x2","y2","ScreenFormBg","props","widthArrowBodyAttrs","heightArrowBodyAttrs","svgLineAttrs","getTransposedSvgLineAttrs","diagonalArrowBodyAttrs","getDiagonalArrowBodyAttrs","widthArrowTips","arrowY","tipHalfWidth","sin","tipHeight","cos","getWidthArrowTips","heightArrowTips","arrowX","getHeightArrowTips","diagonalArrowTips","diagonalAngle","acos","rightCornerXOffset","rightCornerYOffset","leftCornerXOffset","leftCornerYOffset","getDiagonalArrowTips","className","viewBox","points","icons","copy","rotate","ScreenFormMisc","totalPixels","defaultDisplayedRatio","ScreenForm","widthInputRef","useRef","heightInputRef","diagonalInputRef","otherDiagonal","renderedRatio","wrapperStyle","getContainerStyle","ratioStyle","paddingBottom","getRatioStyle","handleInputChangeWith","prop","event","onChange","target","handleInputBlur","isWidthEmpty","current","isHeightEmpty","isDiagonalEmpty","onRemove","useEffect","focus","data-testid","style","type","onClick","src","alt","getSingleYaml","ref","inputMode","title","onBlur","ToggleSwitch","uncheckedSideLabel","checkedSideLabel","checked","App","screenData","handleScreenFormChange","changed","handleScreenFormRemove","screenForms","screenFormData","screens","reduce","acc","push","yamls","getWholeYaml","getDefaultScreen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51add08e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.0e3e08bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.72dd793a.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.a24d83e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/rotate.c91fa003.svg\";","export const toFixedWithoutTrailingZero = function toFixedWithoutTrailingZero(value: number, length: number): string {\n  const integerPart: number = Math.floor(value);\n  if (integerPart === value) {\n    return value.toString();\n  }\n\n  const integerLength: number = integerPart.toString().length;\n  const mantissaLength: number = length - integerLength - 1;\n  return value.toFixed(mantissaLength).replace(/\\.?0+$/, '');\n};\n\nexport const insertCommas = function insertCommasIntoIneger(integer: number): string {\n  return integer.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\nexport const tryParsePositiveFloat = function parseOrFilterPositiveFloat(value?: string | number): number | null {\n  if (typeof value === 'number') {\n    if (isFinite(value) && value > 0) {\n      return value;\n    }\n  } else if (typeof value === 'string') {\n    const parsed = parseFloat(value);\n    if (isFinite(parsed) && parsed > 0) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","const MULTIPLIED_BY_9: { [key: string]: number } = {\n  '3:2': 13.5,\n  '4:3': 12,\n  '5:3': 15,\n  '5:4': 11.25,\n  '16:10': 14.4,\n  '17:10': 15.3,\n};\n\nexport const getAspectRatioString = function getAspectRatioStringFromNumber(ratio: number): string {\n  if (ratio <= 0) {\n    throw new RangeError('`ratio` should be a positive number.');\n  }\n\n  if (ratio === 1) {\n    return '1:1';\n  }\n\n  if (ratio < 1) {\n    return getAspectRatioStringFromNumber(1 / ratio).split(':').reverse().join(':');\n  }\n\n  const ratio9: number = ratio * 9;\n  for (const ratioString of Object.keys(MULTIPLIED_BY_9)) {\n    if (Math.abs(MULTIPLIED_BY_9[ratioString] - ratio9) <= 0.0078125) { // `0.0078125` is `2 ** -7`\n      return ratioString;\n    }\n  }\n\n  return `${Math.round(ratio9 * 10) / 10}:9`;\n};\n\nexport default getAspectRatioString;\n","import getAspectRatioString from './getAspectRatioString';\nimport { tryParsePositiveFloat } from './number';\n\nexport type AvailableUnit = 'cm' | 'in';\n\nexport interface UnitOptions {\n  diagonalUnit?: AvailableUnit,\n  sizeUnit?: AvailableUnit,\n};\n\nexport interface PixelCount {\n  readonly width: number,\n  readonly height: number,\n  readonly total: number,\n};\n\nexport interface RectSize {\n  readonly width: number,\n  readonly height: number,\n};\n\nconst INCH_TO_CENTIMETER_FACTOR: number = 2.54;\n\nexport const toInches = function convertCentimetersToInches(centimeters: number): number {\n  return centimeters / INCH_TO_CENTIMETER_FACTOR;\n};\n\nexport const toCentimeters = function convertInchesToCentimeters(inches: number): number {\n  return inches * INCH_TO_CENTIMETER_FACTOR;\n};\n\nexport class ScreenInfoBase {\n  protected map: Map<string, string> | null;\n\n  readonly pixelCount: PixelCount;\n  readonly ratio: number;\n\n  constructor(width: number, height: number) {\n    const integerWidth: number = Math.floor(width);\n    const integerHeight: number = Math.floor(height);\n\n    this.pixelCount = {\n      width: integerWidth,\n      height: integerHeight,\n      total: integerWidth * integerHeight,\n    };\n    this.ratio = integerWidth / integerHeight;\n    this.map = null;\n  }\n\n  toMap = (options?: UnitOptions): Map<string, string> => {\n    if (this.map) {\n      return this.map;\n    }\n\n    const { pixelCount, ratio }: ScreenInfoBase = this;\n    const newMap = new Map();\n    newMap.set('Screen', `${pixelCount.width} x ${pixelCount.height}`);\n    newMap.set('AspectRatio', `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})`);\n    newMap.set('PixelCount', `${pixelCount.total}`);\n    this.map = newMap;\n\n    return newMap;\n  }\n};\n\nexport class ScreenInfoWithDiagonal extends ScreenInfoBase {\n  readonly diagonal: number;\n  readonly dpi: number;\n  readonly dotPitch: number;\n  readonly size: RectSize;\n\n  constructor(width: number, height: number, diagonal: number) {\n    super(width, height);\n\n    this.diagonal = diagonal;\n    this.dpi = Math.sqrt(this.pixelCount.width ** 2 + this.pixelCount.height ** 2) / diagonal;\n    this.dotPitch = 10 * toCentimeters(1 / this.dpi);\n    this.size = {\n      width: this.pixelCount.width * this.dotPitch / 10,\n      height: this.pixelCount.height * this.dotPitch / 10,\n    };\n  }\n\n  toMap = (options?: UnitOptions): Map<string, string> => {\n    if (this.map) {\n      return this.map;\n    }\n\n    let diagonalUnit: AvailableUnit = 'in';\n    let sizeUnit: AvailableUnit = 'cm';\n    if (options) {\n      ({ diagonalUnit = 'in', sizeUnit = 'cm' } = options);\n    }\n\n    const { pixelCount, diagonal, ratio, dpi, dotPitch, size }: ScreenInfoWithDiagonal = this;\n    const newMap = new Map();\n    newMap.set('Screen', `${pixelCount.width} x ${pixelCount.height}`);\n    newMap.set(\n      'Diagonal',\n      diagonalUnit === 'cm'\n        ? `${toCentimeters(diagonal)} cm`\n        : `${diagonal}\"`\n    );\n    newMap.set('AspectRatio', `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})`);\n    newMap.set('DPI', `${dpi.toFixed(2)}`);\n    newMap.set('DotPitch', `${dotPitch.toFixed(4)}`);\n    newMap.set(\n      'Size',\n      sizeUnit === 'cm'\n        ? `${size.width.toFixed(2)} cm x ${size.height.toFixed(2)} cm`\n        : `${toInches(size.width).toFixed(2)}\" x ${toInches(size.height).toFixed(2)}\"`\n    );\n    newMap.set('PixelCount', `${pixelCount.total}`);\n    this.map = newMap;\n\n    return newMap;\n  }\n};\n\nexport const getScreenInfo = function getScreenInfoFrom(\n  width: number | string,\n  height: number | string,\n  diagonal?: number | string,\n  diagonalUnit?: AvailableUnit,\n) : ScreenInfo | null {\n  const integerWidth: number = typeof width === 'number' ? Math.floor(width) : parseInt(width, 10);\n  const integerHeight: number = typeof height === 'number' ? Math.floor(height) : parseInt(height, 10);\n  if ([integerWidth, integerHeight].some(isNaN)) {\n    return null;\n  }\n  if ([integerWidth, integerHeight].some((value) => value <= 0)) {\n    return null;\n  }\n  if (![integerWidth, integerHeight].every(Number.isSafeInteger)) {\n    return null;\n  }\n\n  let floatDiagonal: number | null = tryParsePositiveFloat(diagonal);\n  if (floatDiagonal && diagonalUnit && diagonalUnit === 'cm') {\n    floatDiagonal /= INCH_TO_CENTIMETER_FACTOR;\n  }\n\n  if (floatDiagonal === null) {\n    return new ScreenInfoBase(integerWidth, integerHeight);\n  }\n  return new ScreenInfoWithDiagonal(integerWidth, integerHeight, floatDiagonal);\n};\n\nexport type ScreenInfo = ScreenInfoWithDiagonal | ScreenInfoBase;\n","import { useState } from 'react';\nimport { toFixedWithoutTrailingZero, tryParsePositiveFloat } from '../utils/number';\nimport { AvailableUnit, toCentimeters, toInches } from '../utils/ScreenInfo';\n\nexport interface StoredScreenFormProps {\n  readonly id: number,\n  readonly width: string,\n  readonly height: string,\n  readonly diagonal: string,\n};\n\nexport interface NewScreenFormProps {\n  readonly width?: string,\n  readonly height?: string,\n  readonly diagonal?: string,\n};\n\nexport interface UpdatedScreenFormProps {\n  readonly width?: string,\n  readonly height?: string,\n  readonly diagonal?: string,\n};\n\nexport interface ScreenFormData {\n  [id: number]: StoredScreenFormProps,\n};\n\nconst defaults: { data: ScreenFormData, idOrder: number[], nextId: number } = (function getDefaults() {\n  const { devicePixelRatio = 1, screen: { width, height } }: Window = window;\n\n  const data: ScreenFormData = {\n    0: {\n      id: 0,\n      width: (width * devicePixelRatio).toString(),\n      height: (height * devicePixelRatio).toString(),\n      diagonal: '',\n    },\n  };\n\n  return {\n    data,\n    idOrder: [0],\n    nextId: 1,\n  };\n})();\n\nconst getConvertedTo = function getConvertedToUnit(value: number, nextUnit: AvailableUnit): string {\n  return nextUnit === 'in'\n    ? toFixedWithoutTrailingZero(toInches(value), 6)\n    : toFixedWithoutTrailingZero(toCentimeters(value), 6)\n};\n\nfunction useScreenData() {\n  const [ data, setData ] = useState<ScreenFormData>(defaults.data);\n  const [ idOrder, setIdOrder ] = useState<number[]>(defaults.idOrder);\n  const [ nextId, setNextId ] = useState<number>(defaults.nextId);\n\n  const [ diagonalUnit, setDiagonalUnit ] = useState<AvailableUnit>('in');\n  const [ sizeUnit, setSizeUnit ] = useState<AvailableUnit>('cm');\n\n  const add = function addScreen(screenFormProps: NewScreenFormProps): void {\n    const id = nextId;\n    setNextId(nextId + 1);\n\n    const newScreenFormProps: StoredScreenFormProps = {\n      id,\n      width: '',\n      height: '',\n      diagonal: '',\n      ...screenFormProps,\n    };\n\n    const nextData: ScreenFormData = {\n      ...data,\n      [id]: newScreenFormProps,\n    };\n    setData(nextData);\n\n    const nextIdOrder: number[] = [ ...idOrder, id ];\n    setIdOrder(nextIdOrder);\n  };\n\n  const update = function updateScreenById(id: number, screenFormProps: UpdatedScreenFormProps): void {\n    if (id >= nextId) {\n      return; // invalid id\n    }\n\n    const nextScreenFormProps: StoredScreenFormProps = {\n      ...data[id],\n      ...screenFormProps,\n    };\n    const nextData: ScreenFormData = {\n      ...data,\n      [id]: nextScreenFormProps,\n    };\n    setData(nextData);\n  };\n\n  const remove = function removeScreenById(id: number): void {\n    const nextData: ScreenFormData = { ...data };\n    delete nextData[id];\n    setData(nextData);\n\n    const nextIdOrder: number[] = idOrder.filter((value) => value !== id);\n    setIdOrder(nextIdOrder);\n  };\n\n  const changeDiagonalUnit = function changeDiagonalUnitTo(nextUnit: AvailableUnit): void {\n    const nextScreenData: ScreenFormData = {};\n\n    for (const id of idOrder) {\n      const parsedDiagonal: number | null = tryParsePositiveFloat(data[id]?.diagonal);\n      if (typeof parsedDiagonal === 'number') {\n        nextScreenData[id] = {\n          ...data[id],\n          diagonal: getConvertedTo(parsedDiagonal, nextUnit),\n        };\n      } else {\n        nextScreenData[id] = data[id];\n      }\n    }\n\n    setData(nextScreenData);\n    setDiagonalUnit(nextUnit);\n  };\n\n  const changeUnits = function changeUnitsTo(\n    { diagonal, size }: { diagonal?: AvailableUnit, size?: AvailableUnit }\n  ): void {\n    if (diagonal && diagonal !== diagonalUnit) {\n      changeDiagonalUnit(diagonal);\n    }\n    if (size && size !== sizeUnit) {\n      setSizeUnit(size);\n    }\n  };\n\n  return {\n    data,\n    idOrder,\n    add,\n    update,\n    remove,\n    units: {\n      diagonal: diagonalUnit,\n      size: sizeUnit,\n      change: changeUnits,\n    },\n  };\n}\n\nexport default useScreenData;\n","// https://stackoverflow.com/q/34045777\nconst copyToClipboard = function copyStringToClipboard(content: string): void {\n  const textareaElement: HTMLTextAreaElement | null = document.createElement('textarea');\n  if (!textareaElement) {\n    return;\n  }\n\n  textareaElement.contentEditable = 'true';\n  textareaElement.readOnly = false;\n  textareaElement.value = content;\n  document.body.appendChild(textareaElement);\n\n  const range: Range = document.createRange();\n  range.selectNodeContents(textareaElement);\n\n  const selection: Selection | null = window.getSelection();\n  if (!selection) {\n    return;\n  }\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  textareaElement.select();\n  textareaElement.setSelectionRange(0, textareaElement.value.length);\n\n  document.execCommand('copy');\n  textareaElement.blur();\n\n  document.body.removeChild(textareaElement);\n};\n\nexport default copyToClipboard;\n","import { StoredScreenFormProps } from '../hooks/useScreenData';\nimport { getScreenInfo, ScreenInfo, UnitOptions } from './ScreenInfo';\n\nconst buildScreenInfoYamlEntry = function buildScreenInfoYamlEntryOfArray(\n  screenInfo: ScreenInfo,\n  options: UnitOptions,\n): string {\n  const map = screenInfo.toMap(options);\n  return '- ' + Array.from(map.keys()).map((key) => `${key}: ${map.get(key)}`).join('\\n  ');\n};\n\nexport const getWholeYaml = function getWholeYamlFromScreenFormData(\n  screenFormData: StoredScreenFormProps[],\n  options: UnitOptions = { diagonalUnit: 'in', sizeUnit: 'cm' },\n): string {\n  const screens: ScreenInfo[] = screenFormData.reduce<ScreenInfo[]>(\n    (acc: ScreenInfo[], props: StoredScreenFormProps) => {\n      const { width, height, diagonal }: StoredScreenFormProps = props;\n      const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal, options.diagonalUnit);\n      if (screenInfo !== null) {\n        acc.push(screenInfo);\n      }\n      return acc;\n    },\n    []\n  );\n  const yamls: string[] = screens.map((screen: ScreenInfo) => buildScreenInfoYamlEntry(screen, options));\n  return yamls.join('\\n\\n') + '\\n';\n};\n\nexport const getSingleYaml = function getSingleYamlFromScreenInfo(\n  screenInfo: ScreenInfo,\n  options: UnitOptions = { diagonalUnit: 'in', sizeUnit: 'cm' },\n): string {\n  const map = screenInfo.toMap(options);\n  return Array.from(map.keys())\n    .map((key) => `${key}: ${map.get(key)}`)\n    .join('\\n');\n};\n","const maxWidth: number = 360;\n\nexport const getContainerStyle = function getContainerStyleByRatio(ratio: number): { width: string } {\n  if (ratio < 9 / 22) {\n    return { width: `${100 * 9 / 22}%` }; // If ratio < 9:22, fix ratio 9:22\n  } else if (ratio < 1) {\n    return { width: `${100 * ratio}%` }; // If 9:22 <= ratio < 1, use width = ratio\n  } else {\n    return { width: '100%' }; // If ratio >= 1, use width = 100%\n  }\n};\n\nexport const getRatioStyle = function getRatioStyleByRatio(ratio: number): { paddingBottom: string } {\n  if (ratio > 22 / 9) {\n    return { paddingBottom: `${100 * 9 / 22}%` }; // If ratio > 22:9, fix ratio 22:9\n  } else if (ratio < 9 / 22) {\n    return { paddingBottom: `${100 * 22 / 9}%` }; // If ratio < 9:22, use ratio 9:22\n  } else {\n    return { paddingBottom: `${100 / ratio}%` }; // If 9:22 <= ratio <= 22:9, use 1 / ratio\n  }\n};\n\nexport const getFormWidth = function getFormWidthByPixels(ratio: number): number {\n  if (ratio < 9 / 22) {\n    return maxWidth * 9 / 22; // ratio < 9:22\n  } else if (ratio < 1) {\n    return maxWidth * ratio; // 9:22 <= ratio < 1\n  } else {\n    return maxWidth; // ratio >= 1\n  }\n};\n\nexport const getFormHeight = function getFormHeightByPixels(ratio: number): number {\n  if (ratio > 22 / 9) {\n    return maxWidth * 9 / 22; // ratio > 22:9\n  } else if (ratio <= 1) {\n    return maxWidth; // ratio <= 1\n  } else {\n    return maxWidth / ratio; // 1 < ratio <= 22:9\n  }\n};\n","export interface SvgLineXy {\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n};\n\nconst padding: number = 10;\nconst arrowTipSide: number = 10;\nconst twentyDegrees: number = 20 * Math.PI / 180;\n\nexport const getTransposedSvgLineAttrs = function getTransposedSvgLineAttributes(svgLineAttrs: SvgLineXy): SvgLineXy {\n  const { x1, y1, x2, y2 }: SvgLineXy = svgLineAttrs;\n  return {\n    x1: y1,\n    y1: x1,\n    x2: y2,\n    y2: x2,\n  };\n};\n\nexport const getWidthArrowBodyAttrs = function getWidthArrowBodyAttributes(width: number, height: number): SvgLineXy {\n  const y = height * 5 / 6;\n  return {\n    x1: padding,\n    y1: y,\n    x2: width - padding,\n    y2: y,\n  };\n};\n\nexport const getDiagonalArrowBodyAttrs = function getDiagonalArrowBodyAttributes(\n  width: number, height: number\n): SvgLineXy {\n  return {\n    x1: padding,\n    y1: height - padding,\n    x2: width - padding,\n    y2: padding,\n  };\n};\n\nexport const getWidthArrowTips = function getTipsOfWidthArrow(width: number, height: number): string[] {\n  const arrowY: number = height * 5 / 6;\n  const tipHalfWidth: number = arrowTipSide * Math.sin(twentyDegrees);\n  const tipHeight: number = arrowTipSide * Math.cos(twentyDegrees);\n\n  return [\n    [\n      padding,\n      arrowY,\n      padding + tipHeight,\n      arrowY - tipHalfWidth,\n      padding + tipHeight,\n      arrowY + tipHalfWidth,\n      padding,\n      arrowY,\n    ].join(' '),\n    [\n      width - padding,\n      arrowY,\n      width - (padding + tipHeight),\n      arrowY + tipHalfWidth,\n      width - (padding + tipHeight),\n      arrowY - tipHalfWidth,\n      width - padding,\n      arrowY,\n    ].join(' '),\n  ];\n};\n\nexport const getHeightArrowTips = function getTipsOfHeightArrow(width: number, height: number): string[] {\n  const arrowX: number = width * 5 / 6;\n  const tipHalfWidth: number = arrowTipSide * Math.sin(twentyDegrees);\n  const tipHeight: number = arrowTipSide * Math.cos(twentyDegrees);\n\n  return [\n    [\n      arrowX,\n      padding,\n      arrowX + tipHalfWidth,\n      padding + tipHeight,\n      arrowX - tipHalfWidth,\n      padding + tipHeight,\n      arrowX,\n      padding,\n    ].join(' '),\n    [\n      arrowX,\n      height - padding,\n      arrowX - tipHalfWidth,\n      height - (padding + tipHeight),\n      arrowX + tipHalfWidth,\n      height - (padding + tipHeight),\n      arrowX,\n      height - padding,\n    ].join(' '),\n  ];\n};\n\nexport const getDiagonalArrowTips = function getTipsOfDiagonalArrow(width: number, height: number): string[] {\n  const diagonalAngle: number = Math.acos(\n    (width - 2 * padding) / Math.sqrt((width - 2 * padding) ** 2 + (height - 2 * padding) ** 2)\n  );\n  const rightCornerXOffset: number = arrowTipSide * Math.cos(diagonalAngle + twentyDegrees);\n  const rightCornerYOffset: number = arrowTipSide * Math.sin(diagonalAngle + twentyDegrees);\n  const leftCornerXOffset: number = arrowTipSide * Math.cos(diagonalAngle - twentyDegrees);\n  const leftCornerYOffset: number = arrowTipSide * Math.sin(diagonalAngle - twentyDegrees);\n\n  return [\n    [\n      padding,\n      height - padding,\n      padding + rightCornerXOffset,\n      height - padding - rightCornerYOffset,\n      padding + leftCornerXOffset,\n      height - padding - leftCornerYOffset,\n      padding,\n      height - padding,\n    ].join(' '),\n    [\n      width - padding,\n      padding,\n      width - padding - rightCornerXOffset,\n      padding + rightCornerYOffset,\n      width - padding - leftCornerXOffset,\n      padding + leftCornerYOffset,\n      width - padding,\n      padding,\n    ].join(' '),\n  ];\n};\n","import React from 'react';\nimport {\n  getDiagonalArrowBodyAttrs,\n  getDiagonalArrowTips,\n  getHeightArrowTips,\n  getTransposedSvgLineAttrs,\n  getWidthArrowBodyAttrs,\n  getWidthArrowTips,\n  SvgLineXy,\n} from './attributeFunctions';\nimport './index.css';\n\ninterface ScreenFormBgProps {\n  width: number,\n  height: number,\n}\n\nfunction ScreenFormBg(props: ScreenFormBgProps) {\n  const { width, height }: ScreenFormBgProps = props;\n\n  const widthArrowBodyAttrs: SvgLineXy = getWidthArrowBodyAttrs(width, height);\n  const heightArrowBodyAttrs: SvgLineXy = getTransposedSvgLineAttrs(getWidthArrowBodyAttrs(height, width));\n  const diagonalArrowBodyAttrs: SvgLineXy = getDiagonalArrowBodyAttrs(width, height);\n\n  const widthArrowTips: string[] = getWidthArrowTips(width, height);\n  const heightArrowTips: string[] = getHeightArrowTips(width, height);\n  const diagonalArrowTips: string[] = getDiagonalArrowTips(width, height);\n\n  return (\n    <svg\n      className=\"ScreenFormBg\"\n      viewBox={`0 0 ${props.width} ${props.height}`}\n      width=\"100%\"\n    >\n      <line { ...widthArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n      <line { ...heightArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n      <line { ...diagonalArrowBodyAttrs } className=\"ScreenFormBg-svg-stroke\" />\n\n      <polygon points={widthArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={widthArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={heightArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={heightArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={diagonalArrowTips[0]} className=\"ScreenFormBg-svg-fill\" />\n      <polygon points={diagonalArrowTips[1]} className=\"ScreenFormBg-svg-fill\" />\n    </svg>\n  );\n}\n\nexport default ScreenFormBg;\n","import add from './add.svg';\nimport copy from './copy.svg';\nimport remove from './remove.svg';\nimport rotate from './rotate.svg';\n\n// Hardcoded for auto completion\ninterface IconCollection {\n  add: string,\n  copy: string,\n  remove: string,\n  rotate: string,\n}\n\nconst icons: IconCollection = {\n  add,\n  copy,\n  remove,\n  rotate,\n};\n\nexport default icons;\n","import React from 'react';\nimport getAspectRatioString from '../../../utils/getAspectRatioString';\nimport { insertCommas } from '../../../utils/number';\nimport './ScreenFormMisc.css';\n\ninterface ScreenFormMiscProps {\n  ratio: number | null,\n  dpi: number | null,\n  dotPitch: number | null,\n  totalPixels: number | null,\n}\n\nfunction ScreenFormMisc({ ratio, dpi, dotPitch, totalPixels }: ScreenFormMiscProps) {\n  return (\n    <div className=\"ScreenFormMisc\">\n      <ul className=\"ScreenFormMisc-info\">\n        <li className=\"ScreenFormMisc-pairs\">\n          <span className=\"ScreenFormMisc-pair\">\n            <span className=\"ScreenFormMisc-key\">\n              Aspect&nbsp;ratio&nbsp;\n            </span>\n            <span className=\"ScreenFormMisc-value\">\n              {ratio ? `${ratio.toFixed(2)}:1 (${getAspectRatioString(ratio)})` : '-'}\n            </span>\n          </span>\n        </li>\n        <li className=\"ScreenFormMisc-pairs\">\n          <span className=\"ScreenFormMisc-pair\">\n            <span className=\"ScreenFormMisc-key\">\n              DPI&nbsp;\n            </span>\n            <span className=\"ScreenFormMisc-value\">\n              {dpi ? dpi.toFixed(2) : '-'}\n            </span>\n          </span>\n          {' '}\n          <span className=\"ScreenFormMisc-pair\">\n            <span className=\"ScreenFormMisc-key\">\n              Dot&nbsp;pitch&nbsp;\n            </span>\n            <span className=\"ScreenFormMisc-value\">\n              {dotPitch ? `${dotPitch.toFixed(4)}mm` : '-'}\n            </span>\n          </span>\n        </li>\n        <li className=\"ScreenFormMisc-pairs\">\n          <span className=\"ScreenFormMisc-pair\">\n            <span className=\"ScreenFormMisc-key\">\n              Pixel&nbsp;count&nbsp;\n            </span>\n            <span className=\"ScreenFormMisc-value\">\n              {totalPixels ? insertCommas(totalPixels) : '-'}\n            </span>\n          </span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default ScreenFormMisc;\n","import React, { useEffect, useRef } from 'react';\nimport { getContainerStyle, getFormHeight, getFormWidth, getRatioStyle } from './styleFunctions';\nimport ScreenFormBg from './ScreenFormBg';\nimport copyToClipboard from '../../../utils/copyToClipboard';\nimport { tryParsePositiveFloat } from '../../../utils/number';\nimport {\n  AvailableUnit,\n  getScreenInfo,\n  RectSize,\n  ScreenInfo,\n  ScreenInfoBase,\n  ScreenInfoWithDiagonal,\n  toCentimeters,\n  toInches,\n} from '../../../utils/ScreenInfo';\nimport { getSingleYaml } from '../../../utils/yaml';\nimport icons from '../../common/icons';\nimport './index.css';\nimport ScreenFormMisc from './ScreenFormMisc';\n\nexport type ScreenFormPropName = 'width' | 'height' | 'diagonal';\n\nexport interface ScreenFormChangedProps {\n  width?: string,\n  height?: string,\n  diagonal?: string,\n};\n\nexport interface ScreenFormProps {\n  children?: React.ReactNode,\n  id: number,\n  width: string,\n  height: string,\n  diagonal: string,\n  diagonalUnit: AvailableUnit,\n  sizeUnit: AvailableUnit,\n  onChange: (id: number, changed: ScreenFormChangedProps) => void,\n  onRemove: (id: number) => void,\n};\n\nconst { ratio: defaultDisplayedRatio }: { ratio: number } = getScreenInfo(1920, 1080) as ScreenInfoBase;\n\nfunction ScreenForm(props: ScreenFormProps) {\n  const widthInputRef = useRef<HTMLInputElement>(null);\n  const heightInputRef = useRef<HTMLInputElement>(null);\n  const diagonalInputRef = useRef<HTMLInputElement>(null);\n\n  const { width, height, diagonal, diagonalUnit, sizeUnit }: ScreenFormProps = props;\n  const floatDiagonal: number | null = tryParsePositiveFloat(diagonal);\n  let otherDiagonal: string = '-';\n  if (floatDiagonal) {\n    if (diagonalUnit === 'in') {\n      otherDiagonal = `${toCentimeters(floatDiagonal).toFixed(2)}cm`;\n    } else {\n      otherDiagonal = `${toInches(floatDiagonal).toFixed(2)}\"`;\n    }\n  }\n\n  const screenInfo: ScreenInfo | null = getScreenInfo(width, height, diagonal, diagonalUnit);\n\n  let ratio: number | null = null;\n  let dpi: number | null = null;\n  let dotPitch: number | null = null;\n  let size: RectSize | null = null;\n  let totalPixels: number | null = null;\n  if (screenInfo instanceof ScreenInfoWithDiagonal) {\n    ({ ratio, dpi, dotPitch, size, pixelCount: { total: totalPixels } } = screenInfo);\n    if (sizeUnit === 'in') {\n      size = {\n        width: toInches(size.width),\n        height: toInches(size.height),\n      };\n    }\n  } else if (screenInfo instanceof ScreenInfoBase) {\n    ({ ratio, pixelCount: { total: totalPixels } } = screenInfo);\n  }\n\n  const renderedRatio: number = ratio || defaultDisplayedRatio;\n  const wrapperStyle: { width: string } = getContainerStyle(renderedRatio);\n  const ratioStyle: { paddingBottom: string } = getRatioStyle(renderedRatio);\n\n  const handleRotateClick = function changeSelfRotated() {\n    props.onChange(props.id, {\n      width: height,\n      height: width,\n    });\n  };\n\n  const handleCopyClick = function copySelf() {\n    if (screenInfo !== null) {\n      copyToClipboard(`${getSingleYaml(screenInfo, { diagonalUnit, sizeUnit })}\\n`);\n    }\n  }\n\n  const handleRemoveClick = function removeSelf() {\n    props.onRemove(props.id);\n  };\n\n  const handleInputChangeWith = function getInputChangeHandlerByProp(prop: ScreenFormPropName) {\n    return function handleInputChange(event: React.ChangeEvent<HTMLInputElement>): void {\n      props.onChange(props.id, { [prop]: event.target.value });\n    };\n  };\n\n  const handleInputBlur = function checkInputsAndRemove(): void {\n    const isWidthEmpty = widthInputRef.current?.value === '';\n    const isHeightEmpty = heightInputRef.current?.value === '';\n    const isDiagonalEmpty = diagonalInputRef.current?.value === '';\n    if (isWidthEmpty && isHeightEmpty && isDiagonalEmpty) {\n      props.onRemove(props.id);\n    }\n  };\n\n  useEffect(() => {\n    widthInputRef.current?.focus();\n  }, []);\n\n  return (\n    <div\n      data-testid=\"ScreenForm\"\n      style={wrapperStyle}\n    >\n      <div className=\"ScreenForm-function\">\n        <button\n          className=\"ScreenForm-function-button\"\n          type=\"button\"\n          onClick={handleRotateClick}\n        >\n          <img src={icons.rotate} alt=\"Rotate\" width={24} height={24} />\n        </button>\n        <button\n          className=\"ScreenForm-function-button\"\n          type=\"button\"\n          onClick={handleCopyClick}\n        >\n          <img src={icons.copy} alt=\"Copy\" width={24} height={24} />\n        </button>\n        <button\n          className=\"ScreenForm-function-button-negative\"\n          type=\"button\"\n          onClick={handleRemoveClick}\n        >\n          <img src={icons.remove} alt=\"Remove\" width={24} height={24} />\n        </button>\n      </div>\n\n      <div className=\"ScreenForm-screen\">\n        <div\n          className=\"ScreenForm-ratio\"\n          style={ratioStyle}\n        />\n\n        <div className=\"ScreenForm-content\">\n          <ScreenFormBg\n            width={getFormWidth(renderedRatio)}\n            height={getFormHeight(renderedRatio)}\n          />\n\n          <div className=\"ScreenForm-grid\">\n            <ul className=\"ScreenForm-grid-item ScreenForm-width\">\n              <li>\n                <input\n                  ref={widthInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={width}\n                  inputMode=\"numeric\"\n                  title=\"Width\"\n                  onChange={handleInputChangeWith('width')}\n                  onBlur={handleInputBlur}\n                />&nbsp;px\n              </li>\n              <li>\n                {size ? `${size.width.toFixed(2)}${sizeUnit === 'in' ? '\"' : sizeUnit}` : '-'}\n              </li>\n            </ul>\n            <ul className=\"ScreenForm-grid-item ScreenForm-height\">\n              <li>\n                <input\n                  ref={heightInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={height}\n                  inputMode=\"numeric\"\n                  title=\"Height\"\n                  onChange={handleInputChangeWith('height')}\n                  onBlur={handleInputBlur}\n                />&nbsp;px\n              </li>\n              <li>\n                {size ? `${size.height.toFixed(2)}${sizeUnit === 'in' ? '\"' : sizeUnit}` : '-'}\n              </li>\n            </ul>\n            <ul className=\"ScreenForm-grid-item ScreenForm-diagonal\">\n              <li>\n                <input\n                  ref={diagonalInputRef}\n                  className=\"ScreenForm-input\"\n                  type=\"text\"\n                  value={diagonal}\n                  inputMode=\"decimal\"\n                  title=\"Diagonal\"\n                  onChange={handleInputChangeWith('diagonal')}\n                  onBlur={handleInputBlur}\n                />&nbsp;{diagonalUnit}\n              </li>\n              <li>\n                {otherDiagonal}\n              </li>\n            </ul>\n          </div>\n\n          <ScreenFormMisc\n            ratio={ratio}\n            dpi={dpi}\n            dotPitch={dotPitch}\n            totalPixels={totalPixels}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ScreenForm;\n","import React from 'react';\nimport './ToggleSwitch.css';\n\nexport interface ToggleSwitchProps {\n  uncheckedSideLabel?: string,\n  checkedSideLabel?: string,\n  checked: boolean,\n  onChange: (checked: boolean) => void,\n};\n\nfunction ToggleSwitch(props: ToggleSwitchProps) {\n  const { uncheckedSideLabel, checkedSideLabel, checked } = props;\n\n  const handleInputChange = function reportToggled(event: React.ChangeEvent<HTMLInputElement>): void {\n    props.onChange(event.target.checked);\n  };\n\n  return (\n    <label className=\"ToggleSwitch\">\n      <span className=\"ToggleSwitch-label\">\n        {uncheckedSideLabel}\n      </span>\n      <input\n        className=\"ToggleSwitch-checkbox\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleInputChange}\n      />\n      <span className=\"ToggleSwitch-switch\">\n        <span className=\"ToggleSwitch-switch-knob\">\n        </span>\n      </span>\n      <span className=\"ToggleSwitch-label\">\n        {checkedSideLabel}\n      </span>\n    </label>\n  );\n}\n\nexport default ToggleSwitch;\n","import React from 'react';\nimport useScreenData, { NewScreenFormProps } from '../../hooks/useScreenData';\nimport copyToClipboard from '../../utils/copyToClipboard';\nimport { AvailableUnit } from '../../utils/ScreenInfo';\nimport { getWholeYaml } from '../../utils/yaml';\nimport ScreenForm, { ScreenFormChangedProps } from '../forms/ScreenForm';\nimport ToggleSwitch from '../forms/ToggleSwitch';\nimport icons from '../common/icons';\nimport './App.css';\n\nconst getDefaultScreen = function getDefaultScreenData(): NewScreenFormProps {\n  const { devicePixelRatio = 1, screen: { width, height } }: Window = window;\n  return {\n    width: (width * devicePixelRatio).toString(),\n    height: (height * devicePixelRatio).toString(),\n    diagonal: '',\n  };\n}\n\nfunction App() {\n  const screenData = useScreenData();\n\n  const handleCopyClick = function handleCopyAsYamlClick(): void {\n    const { data, idOrder, units: { diagonal: diagonalUnit, size: sizeUnit } } = screenData;\n    copyToClipboard(getWholeYaml(idOrder.map((id) => data[id]), { diagonalUnit, sizeUnit }));\n  };\n\n  const handleAddClick = function handleAddNewScreenFormClick(): void {\n    screenData.add(getDefaultScreen());\n  };\n\n  const handleScreenFormChange = function handleScreenFormChangeById(\n    id: number,\n    changed: ScreenFormChangedProps,\n  ): void {\n    screenData.update(id, changed);\n  };\n\n  const handleScreenFormRemove = function handleScreenFormRemoveById(id: number): void {\n    screenData.remove(id);\n  };\n\n  const handleDiagonalUnitChange = function handleDiagonalUnitToggleChange(checked: boolean): void {\n    const nextUnit: AvailableUnit = checked ? 'in' : 'cm';\n    screenData.units.change({ diagonal: nextUnit });\n  };\n\n  const handleSizeUnitChange = function handleSizeUnitToggleChange(checked: boolean): void {\n    const nextUnit: AvailableUnit = checked ? 'in' : 'cm';\n    screenData.units.change({ size: nextUnit });\n  };\n\n  const screenForms = screenData.idOrder.map((id) => (\n    <ScreenForm\n      { ...screenData.data[id] }\n      diagonalUnit={screenData.units.diagonal}\n      sizeUnit={screenData.units.size}\n      key={id}\n      onChange={handleScreenFormChange}\n      onRemove={handleScreenFormRemove}\n    />\n  ));\n\n  return (\n    <div className=\"App\" data-testid=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-header-title\">\n          Aspect Ratio Calculator\n        </h1>\n        <div className=\"App-header-button-container\">\n          <button\n            className=\"App-header-button\"\n            type=\"button\"\n            onClick={handleCopyClick}\n          >\n            <img src={icons.copy} alt=\"Copy all\" width={24} height={24} />\n          </button>\n        </div>\n      </header>\n\n      <main className=\"App-main\">\n        {screenForms}\n\n        <div className=\"App-main-add\">\n          <div className=\"App-main-add-ratio\" />\n          <button\n            className=\"App-main-add-button\"\n            type=\"button\"\n            onClick={handleAddClick}\n          >\n            <img src={icons.add} alt=\"Add\" width={24} height={24} />\n          </button>\n        </div>\n      </main>\n\n      <footer className=\"App-footer\">\n        <h2 className=\"App-footer-title\">\n          Options\n        </h2>\n        <ul className=\"App-footer-config\">\n          <li className=\"App-footer-config-list\">\n            <span className=\"App-footer-config-key\">\n              Width/Height\n            </span>\n            <span className=\"App-footer-config-value\">\n              <ToggleSwitch\n                checkedSideLabel=\"in\"\n                uncheckedSideLabel=\"cm\"\n                checked={screenData.units.size === 'in'}\n                onChange={handleSizeUnitChange}\n              />\n            </span>\n          </li>\n          <li className=\"App-footer-config-list\">\n            <span className=\"App-footer-config-key\">\n              Diagonal\n            </span>\n            <span className=\"App-footer-config-value\">\n              <ToggleSwitch\n                checkedSideLabel=\"in\"\n                uncheckedSideLabel=\"cm\"\n                checked={screenData.units.diagonal === 'in'}\n                onChange={handleDiagonalUnitChange}\n              />\n            </span>\n          </li>\n        </ul>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}